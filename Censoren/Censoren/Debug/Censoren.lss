
Censoren.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000b1a  00000bae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800100  00800100  00000bae  2**0
                  ALLOC
  3 .stab         000023dc  00000000  00000000  00000bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000036f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ace  00000000  00000000  00003798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b5  00000000  00000000  00004266  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000565  00000000  00000000  0000461b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00004b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000376  00000000  00000000  00004e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e6  00000000  00000000  0000517e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 34 03 	call	0x668	; 0x668 <main>
  9e:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
  b0:	eb 01       	movw	r28, r22
  b2:	da 01       	movw	r26, r20
  b4:	80 91 0a 01 	lds	r24, 0x010A
  b8:	90 91 0b 01 	lds	r25, 0x010B
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
  c0:	e1 e1       	ldi	r30, 0x11	; 17
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	42 2f       	mov	r20, r18
  ca:	b9 01       	movw	r22, r18
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <SCH_Add_Task+0x3e>
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	37 96       	adiw	r30, 0x07	; 7
  da:	26 30       	cpi	r18, 0x06	; 6
  dc:	31 05       	cpc	r19, r1
  de:	a1 f7       	brne	.-24     	; 0xc8 <SCH_Add_Task+0x22>
  e0:	84 2f       	mov	r24, r20
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SCH_Add_Task+0x40>
  e4:	82 2f       	mov	r24, r18
  e6:	85 30       	cpi	r24, 0x05	; 5
  e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x4c>
  ea:	17 c0       	rjmp	.+46     	; 0x11a <SCH_Add_Task+0x74>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	86 1b       	sub	r24, r22
 102:	97 0b       	sbc	r25, r23
 104:	fc 01       	movw	r30, r24
 106:	e6 5f       	subi	r30, 0xF6	; 246
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	11 83       	std	Z+1, r17	; 0x01
 10c:	00 83       	st	Z, r16
 10e:	d3 83       	std	Z+3, r29	; 0x03
 110:	c2 83       	std	Z+2, r28	; 0x02
 112:	b5 83       	std	Z+5, r27	; 0x05
 114:	a4 83       	std	Z+4, r26	; 0x04
 116:	16 82       	std	Z+6, r1	; 0x06
 118:	84 2f       	mov	r24, r20
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <SCH_Delete_Task>:
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 1b       	sub	r30, r24
 136:	f9 0b       	sbc	r31, r25
 138:	e6 5f       	subi	r30, 0xF6	; 246
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	10 82       	st	Z, r1
 140:	13 82       	std	Z+3, r1	; 0x03
 142:	12 82       	std	Z+2, r1	; 0x02
 144:	15 82       	std	Z+5, r1	; 0x05
 146:	14 82       	std	Z+4, r1	; 0x04
 148:	16 82       	std	Z+6, r1	; 0x06
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret

0000014e <SCH_Dispatch_Tasks>:
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	c0 e1       	ldi	r28, 0x10	; 16
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	0f 2e       	mov	r0, r31
 162:	fa ef       	ldi	r31, 0xFA	; 250
 164:	ef 2e       	mov	r14, r31
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	ff 2e       	mov	r15, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	ec 0e       	add	r14, r28
 16e:	fd 1e       	adc	r15, r29
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	91 f0       	breq	.+36     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 178:	d7 01       	movw	r26, r14
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	61 f0       	breq	.+24     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 184:	09 95       	icall
 186:	88 81       	ld	r24, Y
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	88 83       	st	Y, r24
 18c:	f7 01       	movw	r30, r14
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	19 f4       	brne	.+6      	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 196:	81 2f       	mov	r24, r17
 198:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	27 96       	adiw	r28, 0x07	; 7
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	15 30       	cpi	r17, 0x05	; 5
 1aa:	19 f7       	brne	.-58     	; 0x172 <SCH_Dispatch_Tasks+0x24>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <SCH_Init_T1>:
 1bc:	cf 93       	push	r28
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	c5 30       	cpi	r28, 0x05	; 5
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <SCH_Init_T1+0x4>
 1cc:	81 e7       	ldi	r24, 0x71	; 113
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	90 93 89 00 	sts	0x0089, r25
 1d4:	80 93 88 00 	sts	0x0088, r24
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	80 93 81 00 	sts	0x0081, r24
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 6f 00 	sts	0x006F, r24
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <SCH_Start>:
 1e8:	78 94       	sei
 1ea:	08 95       	ret

000001ec <__vector_11>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	ea e0       	ldi	r30, 0x0A	; 10
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	df 01       	movw	r26, r30
 210:	16 96       	adiw	r26, 0x06	; 6
 212:	9f 01       	movw	r18, r30
 214:	2d 5d       	subi	r18, 0xDD	; 221
 216:	3f 4f       	sbci	r19, 0xFF	; 255
 218:	80 81       	ld	r24, Z
 21a:	91 81       	ldd	r25, Z+1	; 0x01
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	91 f0       	breq	.+36     	; 0x244 <__vector_11+0x58>
 220:	82 81       	ldd	r24, Z+2	; 0x02
 222:	93 81       	ldd	r25, Z+3	; 0x03
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	59 f4       	brne	.+22     	; 0x23e <__vector_11+0x52>
 228:	8c 91       	ld	r24, X
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	8c 93       	st	X, r24
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	39 f0       	breq	.+14     	; 0x244 <__vector_11+0x58>
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	93 83       	std	Z+3, r25	; 0x03
 23a:	82 83       	std	Z+2, r24	; 0x02
 23c:	03 c0       	rjmp	.+6      	; 0x244 <__vector_11+0x58>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	93 83       	std	Z+3, r25	; 0x03
 242:	82 83       	std	Z+2, r24	; 0x02
 244:	37 96       	adiw	r30, 0x07	; 7
 246:	17 96       	adiw	r26, 0x07	; 7
 248:	e2 17       	cp	r30, r18
 24a:	f3 07       	cpc	r31, r19
 24c:	29 f7       	brne	.-54     	; 0x218 <__vector_11+0x2c>
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <SR04Signal>:
	}	
	avgtemp = totaal / 10.0;
}

//zend sr04 signaal en reken hiermee
void SR04Signal(){
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29

	float distance = 0.00;

	//echoDone is een boolean die checkt of de echo klaar is
	//Als de echo pas klaar is mag ermee worden gerekend
	echoDone = 0;
 274:	10 92 09 01 	sts	0x0109, r1

	//Timer0 counter wordt gereset
	countTimer0 = 0;
 278:	10 92 05 01 	sts	0x0105, r1
 27c:	10 92 06 01 	sts	0x0106, r1
 280:	10 92 07 01 	sts	0x0107, r1
 284:	10 92 08 01 	sts	0x0108, r1


	//pulse sturen naar de trigger
	PORTB = 0x00;
 288:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	8f e3       	ldi	r24, 0x3F	; 63
 28c:	9f e1       	ldi	r25, 0x1F	; 31
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <SR04Signal+0x22>
 292:	00 c0       	rjmp	.+0      	; 0x294 <SR04Signal+0x28>
 294:	00 00       	nop
	_delay_ms(2);
	PORTB = 0xff;
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	95 e3       	ldi	r25, 0x35	; 53
 29c:	9a 95       	dec	r25
 29e:	f1 f7       	brne	.-4      	; 0x29c <SR04Signal+0x30>
 2a0:	00 00       	nop
	_delay_us(10);
	PORTB = 0x00;
 2a2:	15 b8       	out	0x05, r1	; 5

	//check of echo weer low is
	while (!echoDone);
 2a4:	80 91 09 01 	lds	r24, 0x0109
 2a8:	88 23       	and	r24, r24
 2aa:	e1 f3       	breq	.-8      	; 0x2a4 <SR04Signal+0x38>

	//berekening afstand
	distance = countTimer0/16E6;
 2ac:	60 91 05 01 	lds	r22, 0x0105
 2b0:	70 91 06 01 	lds	r23, 0x0106
 2b4:	80 91 07 01 	lds	r24, 0x0107
 2b8:	90 91 08 01 	lds	r25, 0x0108
 2bc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__floatunsisf>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	34 e2       	ldi	r19, 0x24	; 36
 2c4:	44 e7       	ldi	r20, 0x74	; 116
 2c6:	5b e4       	ldi	r21, 0x4B	; 75
 2c8:	0e 94 de 03 	call	0x7bc	; 0x7bc <__divsf3>
	distance = 17013.0*distance;
 2cc:	46 2f       	mov	r20, r22
 2ce:	57 2f       	mov	r21, r23
 2d0:	68 2f       	mov	r22, r24
 2d2:	79 2f       	mov	r23, r25
 2d4:	cb 01       	movw	r24, r22
 2d6:	ba 01       	movw	r22, r20
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	3a ee       	ldi	r19, 0xEA	; 234
 2dc:	44 e8       	ldi	r20, 0x84	; 132
 2de:	56 e4       	ldi	r21, 0x46	; 70
 2e0:	0e 94 28 05 	call	0xa50	; 0xa50 <__mulsf3>
 2e4:	06 2f       	mov	r16, r22
 2e6:	17 2f       	mov	r17, r23
 2e8:	d8 2f       	mov	r29, r24
 2ea:	c9 2f       	mov	r28, r25

	//verzenden naar serial
	if(distance <= 6){currentdistance = 5;}
 2ec:	86 2f       	mov	r24, r22
 2ee:	91 2f       	mov	r25, r17
 2f0:	ad 2f       	mov	r26, r29
 2f2:	bc 2f       	mov	r27, r28
 2f4:	bc 01       	movw	r22, r24
 2f6:	cd 01       	movw	r24, r26
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 ec       	ldi	r20, 0xC0	; 192
 2fe:	50 e4       	ldi	r21, 0x40	; 64
 300:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__cmpsf2>
 304:	18 16       	cp	r1, r24
 306:	6c f0       	brlt	.+26     	; 0x322 <SR04Signal+0xb6>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	a0 ea       	ldi	r26, 0xA0	; 160
 30e:	b0 e4       	ldi	r27, 0x40	; 64
 310:	80 93 2d 01 	sts	0x012D, r24
 314:	90 93 2e 01 	sts	0x012E, r25
 318:	a0 93 2f 01 	sts	0x012F, r26
 31c:	b0 93 30 01 	sts	0x0130, r27
 320:	27 c0       	rjmp	.+78     	; 0x370 <SR04Signal+0x104>
	else if(distance > 160){currentdistance = 161;}
 322:	80 2f       	mov	r24, r16
 324:	91 2f       	mov	r25, r17
 326:	ad 2f       	mov	r26, r29
 328:	bc 2f       	mov	r27, r28
 32a:	bc 01       	movw	r22, r24
 32c:	cd 01       	movw	r24, r26
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	40 e2       	ldi	r20, 0x20	; 32
 334:	53 e4       	ldi	r21, 0x43	; 67
 336:	0e 94 24 05 	call	0xa48	; 0xa48 <__gesf2>
 33a:	18 16       	cp	r1, r24
 33c:	6c f4       	brge	.+26     	; 0x358 <SR04Signal+0xec>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	a1 e2       	ldi	r26, 0x21	; 33
 344:	b3 e4       	ldi	r27, 0x43	; 67
 346:	80 93 2d 01 	sts	0x012D, r24
 34a:	90 93 2e 01 	sts	0x012E, r25
 34e:	a0 93 2f 01 	sts	0x012F, r26
 352:	b0 93 30 01 	sts	0x0130, r27
 356:	0c c0       	rjmp	.+24     	; 0x370 <SR04Signal+0x104>
	else{currentdistance = distance;}
 358:	80 2f       	mov	r24, r16
 35a:	91 2f       	mov	r25, r17
 35c:	ad 2f       	mov	r26, r29
 35e:	bc 2f       	mov	r27, r28
 360:	80 93 2d 01 	sts	0x012D, r24
 364:	90 93 2e 01 	sts	0x012E, r25
 368:	a0 93 2f 01 	sts	0x012F, r26
 36c:	b0 93 30 01 	sts	0x0130, r27

}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	08 95       	ret

0000037a <uart_init>:
char shit_fuck;

//serialisering
void uart_init() {
	// set the baud rate
	UBRR0H = 19200;
 37a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
 37e:	83 e3       	ldi	r24, 0x33	; 51
 380:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
 384:	10 92 c0 00 	sts	0x00C0, r1
	// enable transmitter and receiver
	UCSR0B = _BV(TXEN0)|_BV(RXEN0);
 388:	88 e1       	ldi	r24, 0x18	; 24
 38a:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 38e:	86 e0       	ldi	r24, 0x06	; 6
 390:	80 93 c2 00 	sts	0x00C2, r24
}
 394:	08 95       	ret

00000396 <transmit>:
//transmitten naar Realterm/Putty/Centrale
void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 396:	e0 ec       	ldi	r30, 0xC0	; 192
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	90 81       	ld	r25, Z
 39c:	95 ff       	sbrs	r25, 5
 39e:	fd cf       	rjmp	.-6      	; 0x39a <transmit+0x4>
	// send the data
	UDR0 = data;
 3a0:	80 93 c6 00 	sts	0x00C6, r24
}
 3a4:	08 95       	ret

000003a6 <transmitData>:

}

void transmitData()
{
	transmit(avgtemp);
 3a6:	60 91 01 01 	lds	r22, 0x0101
 3aa:	70 91 02 01 	lds	r23, 0x0102
 3ae:	80 91 03 01 	lds	r24, 0x0103
 3b2:	90 91 04 01 	lds	r25, 0x0104
 3b6:	0e 94 46 04 	call	0x88c	; 0x88c <__fixunssfsi>
 3ba:	86 2f       	mov	r24, r22
 3bc:	0e 94 cb 01 	call	0x396	; 0x396 <transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c0:	8f e9       	ldi	r24, 0x9F	; 159
 3c2:	9f e0       	ldi	r25, 0x0F	; 15
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <transmitData+0x1e>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <transmitData+0x24>
 3ca:	00 00       	nop
	_delay_ms(1);
	transmit(light);
 3cc:	80 91 00 01 	lds	r24, 0x0100
 3d0:	0e 94 cb 01 	call	0x396	; 0x396 <transmit>
 3d4:	8f e9       	ldi	r24, 0x9F	; 159
 3d6:	9f e0       	ldi	r25, 0x0F	; 15
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <transmitData+0x32>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <transmitData+0x38>
 3de:	00 00       	nop
	_delay_ms(1);
	transmit(currentdistance);
 3e0:	60 91 2d 01 	lds	r22, 0x012D
 3e4:	70 91 2e 01 	lds	r23, 0x012E
 3e8:	80 91 2f 01 	lds	r24, 0x012F
 3ec:	90 91 30 01 	lds	r25, 0x0130
 3f0:	0e 94 46 04 	call	0x88c	; 0x88c <__fixunssfsi>
 3f4:	86 2f       	mov	r24, r22
 3f6:	0e 94 cb 01 	call	0x396	; 0x396 <transmit>
 3fa:	8f e9       	ldi	r24, 0x9F	; 159
 3fc:	9f e0       	ldi	r25, 0x0F	; 15
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <transmitData+0x58>
 402:	00 c0       	rjmp	.+0      	; 0x404 <transmitData+0x5e>
 404:	00 00       	nop
	_delay_ms(1);
}
 406:	08 95       	ret

00000408 <receive>:
}

unsigned char receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 408:	e0 ec       	ldi	r30, 0xC0	; 192
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	88 23       	and	r24, r24
 410:	ec f7       	brge	.-6      	; 0x40c <receive+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 412:	80 91 c6 00 	lds	r24, 0x00C6
}
 416:	08 95       	ret

00000418 <input_handler>:
	}
}

void input_handler(){
	if(message_incoming){
		shit_fuck = receive();
 418:	0e 94 04 02 	call	0x408	; 0x408 <receive>
 41c:	80 93 31 01 	sts	0x0131, r24
	}
}
 420:	08 95       	ret

00000422 <message_incoming>:
	return UDR0;
}

int message_incoming(void)
{
	if((UCSR0A & (1<<RXC0))){
 422:	80 91 c0 00 	lds	r24, 0x00C0
		return 1;
 426:	99 27       	eor	r25, r25
 428:	87 fd       	sbrc	r24, 7
 42a:	90 95       	com	r25
	} else {
		return 0;
	}
}
 42c:	89 2f       	mov	r24, r25
 42e:	88 1f       	adc	r24, r24
 430:	88 27       	eor	r24, r24
 432:	88 1f       	adc	r24, r24
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	08 95       	ret

00000438 <ADCsingleREAD>:
//AnalogRead
int ADCsingleREAD(uint8_t adctouse)
{
	int ADCval;

	ADMUX = adctouse;         // use #1 ADC
 438:	ec e7       	ldi	r30, 0x7C	; 124
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
 43e:	80 81       	ld	r24, Z
 440:	80 64       	ori	r24, 0x40	; 64
 442:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
 444:	80 81       	ld	r24, Z
 446:	8f 7d       	andi	r24, 0xDF	; 223
 448:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 16Mhz
 44a:	ea e7       	ldi	r30, 0x7A	; 122
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	87 60       	ori	r24, 0x07	; 7
 452:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
 454:	80 81       	ld	r24, Z
 456:	80 68       	ori	r24, 0x80	; 128
 458:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
 45a:	80 81       	ld	r24, Z
 45c:	80 64       	ori	r24, 0x40	; 64
 45e:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
 460:	80 81       	ld	r24, Z
 462:	86 fd       	sbrc	r24, 6
 464:	fd cf       	rjmp	.-6      	; 0x460 <ADCsingleREAD+0x28>


	ADCval = ADCL;
 466:	20 91 78 00 	lds	r18, 0x0078
		ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
 46a:	30 91 79 00 	lds	r19, 0x0079
 46e:	93 2f       	mov	r25, r19
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	82 0f       	add	r24, r18
 474:	91 1d       	adc	r25, r1

	return ADCval;
}
 476:	08 95       	ret

00000478 <readLDR>:
}
//lichtsensor
void readLDR()
{
	int ADCvalue;	//int variabele ADCValue aanmaken
	ADCvalue = ADCsingleREAD(1);	//Lees de ADC uit voor pin 1 en sla deze op in ADCValue
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 1c 02 	call	0x438	; 0x438 <ADCsingleREAD>
	if (ADCvalue <= 150) //maak booleaanse expressie met licht(1) of donker(0) als uitkomst
 47e:	87 39       	cpi	r24, 0x97	; 151
 480:	91 05       	cpc	r25, r1
 482:	1c f4       	brge	.+6      	; 0x48a <readLDR+0x12>
	{
		light = 0;	//stel variabele light in op 0(donker)
 484:	10 92 00 01 	sts	0x0100, r1
 488:	08 95       	ret
	}
	if (ADCvalue > 150)
	{
		light = 1;	//stel variabele light in op 1(licht)
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	80 93 00 01 	sts	0x0100, r24
 490:	08 95       	ret

00000492 <readTemp>:
}
//Temp sensor
float readTemp()
{
	int ADCvalue;	//int variabele ADCValue aanmaken
	ADCvalue = ADCsingleREAD(0);	//Lees de ADC uit voor pin 0 en sla deze op in ADCValue
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 1c 02 	call	0x438	; 0x438 <ADCsingleREAD>
    float temperatuur = 0.00;	//Float variabele aanmaken voor het berekenen van- en opslaan van temperatuur
	temperatuur = ((ADCvalue * (5000.0/1024.0)) - 500.0) /10.0;	//Temperatuur berekenen uit ADCValue
 498:	9c 01       	movw	r18, r24
 49a:	b9 01       	movw	r22, r18
 49c:	88 27       	eor	r24, r24
 49e:	77 fd       	sbrc	r23, 7
 4a0:	80 95       	com	r24
 4a2:	98 2f       	mov	r25, r24
 4a4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__floatsisf>
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	30 e4       	ldi	r19, 0x40	; 64
 4ac:	4c e9       	ldi	r20, 0x9C	; 156
 4ae:	50 e4       	ldi	r21, 0x40	; 64
 4b0:	0e 94 28 05 	call	0xa50	; 0xa50 <__mulsf3>
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	4a ef       	ldi	r20, 0xFA	; 250
 4ba:	53 e4       	ldi	r21, 0x43	; 67
 4bc:	0e 94 75 03 	call	0x6ea	; 0x6ea <__subsf3>
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	40 e2       	ldi	r20, 0x20	; 32
 4c6:	51 e4       	ldi	r21, 0x41	; 65
 4c8:	0e 94 de 03 	call	0x7bc	; 0x7bc <__divsf3>
	return temperatuur;	//return temperatuur in float formaat
}
 4cc:	46 2f       	mov	r20, r22
 4ce:	57 2f       	mov	r21, r23
 4d0:	68 2f       	mov	r22, r24
 4d2:	79 2f       	mov	r23, r25
 4d4:	cb 01       	movw	r24, r22
 4d6:	ba 01       	movw	r22, r20
 4d8:	08 95       	ret

000004da <calculateAvgTemp>:
		light = 1;	//stel variabele light in op 1(licht)
	}
}

void calculateAvgTemp()
{
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	ca e0       	ldi	r28, 0x0A	; 10
 4e8:	d0 e0       	ldi	r29, 0x00	; 0
	int a;
	float totaal = 0.0;
 4ea:	10 e0       	ldi	r17, 0x00	; 0
 4ec:	00 e0       	ldi	r16, 0x00	; 0
 4ee:	ff 24       	eor	r15, r15
 4f0:	ee 24       	eor	r14, r14
	for(a = 0; a <10; a++)
	{
		totaal += readTemp();
 4f2:	0e 94 49 02 	call	0x492	; 0x492 <readTemp>
 4f6:	9b 01       	movw	r18, r22
 4f8:	ac 01       	movw	r20, r24
 4fa:	81 2f       	mov	r24, r17
 4fc:	90 2f       	mov	r25, r16
 4fe:	af 2d       	mov	r26, r15
 500:	be 2d       	mov	r27, r14
 502:	bc 01       	movw	r22, r24
 504:	cd 01       	movw	r24, r26
 506:	0e 94 76 03 	call	0x6ec	; 0x6ec <__addsf3>
 50a:	16 2f       	mov	r17, r22
 50c:	07 2f       	mov	r16, r23
 50e:	f8 2e       	mov	r15, r24
 510:	e9 2e       	mov	r14, r25
 512:	21 97       	sbiw	r28, 0x01	; 1

void calculateAvgTemp()
{
	int a;
	float totaal = 0.0;
	for(a = 0; a <10; a++)
 514:	71 f7       	brne	.-36     	; 0x4f2 <calculateAvgTemp+0x18>
	{
		totaal += readTemp();
	}	
	avgtemp = totaal / 10.0;
 516:	86 2f       	mov	r24, r22
 518:	90 2f       	mov	r25, r16
 51a:	af 2d       	mov	r26, r15
 51c:	be 2d       	mov	r27, r14
 51e:	bc 01       	movw	r22, r24
 520:	cd 01       	movw	r24, r26
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	40 e2       	ldi	r20, 0x20	; 32
 528:	51 e4       	ldi	r21, 0x41	; 65
 52a:	0e 94 de 03 	call	0x7bc	; 0x7bc <__divsf3>
 52e:	dc 01       	movw	r26, r24
 530:	cb 01       	movw	r24, r22
 532:	80 93 01 01 	sts	0x0101, r24
 536:	90 93 02 01 	sts	0x0102, r25
 53a:	a0 93 03 01 	sts	0x0103, r26
 53e:	b0 93 04 01 	sts	0x0104, r27
}
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	08 95       	ret

00000550 <rollOut>:
	_delay_ms(1);
}

void rollOut()
{
	uint8_t status = PORTD;
 550:	8b b1       	in	r24, 0x0b	; 11
	if (status &= 0b00000100)
 552:	82 ff       	sbrs	r24, 2
 554:	0f c0       	rjmp	.+30     	; 0x574 <rollOut+0x24>
	{
		PORTD = PORTD<<1;
 556:	8b b1       	in	r24, 0x0b	; 11
 558:	88 0f       	add	r24, r24
 55a:	8b b9       	out	0x0b, r24	; 11
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	9b e7       	ldi	r25, 0x7B	; 123
 560:	a2 e9       	ldi	r26, 0x92	; 146
 562:	81 50       	subi	r24, 0x01	; 1
 564:	90 40       	sbci	r25, 0x00	; 0
 566:	a0 40       	sbci	r26, 0x00	; 0
 568:	e1 f7       	brne	.-8      	; 0x562 <rollOut+0x12>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <rollOut+0x1c>
 56c:	00 00       	nop
		_delay_ms(3000);
		PORTD = PORTD<<1;
 56e:	8b b1       	in	r24, 0x0b	; 11
 570:	88 0f       	add	r24, r24
 572:	8b b9       	out	0x0b, r24	; 11
 574:	08 95       	ret

00000576 <rollIn>:
	}
}

void rollIn()
{
	uint8_t status = PORTD;
 576:	8b b1       	in	r24, 0x0b	; 11
	if (status &= 0b00010000)
 578:	84 ff       	sbrs	r24, 4
 57a:	0f c0       	rjmp	.+30     	; 0x59a <rollIn+0x24>
	{
		PORTD = PORTD>>1;
 57c:	8b b1       	in	r24, 0x0b	; 11
 57e:	86 95       	lsr	r24
 580:	8b b9       	out	0x0b, r24	; 11
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	9b e7       	ldi	r25, 0x7B	; 123
 586:	a2 e9       	ldi	r26, 0x92	; 146
 588:	81 50       	subi	r24, 0x01	; 1
 58a:	90 40       	sbci	r25, 0x00	; 0
 58c:	a0 40       	sbci	r26, 0x00	; 0
 58e:	e1 f7       	brne	.-8      	; 0x588 <rollIn+0x12>
 590:	00 c0       	rjmp	.+0      	; 0x592 <rollIn+0x1c>
 592:	00 00       	nop
		_delay_ms(3000);
		PORTD = PORTD>>1;
 594:	8b b1       	in	r24, 0x0b	; 11
 596:	86 95       	lsr	r24
 598:	8b b9       	out	0x0b, r24	; 11
 59a:	08 95       	ret

0000059c <__vector_16>:
	}
}

//overflow interrupt op timer 0
ISR(TIMER0_OVF_vect){
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
	countTimer0 += 255;
 5ae:	80 91 05 01 	lds	r24, 0x0105
 5b2:	90 91 06 01 	lds	r25, 0x0106
 5b6:	a0 91 07 01 	lds	r26, 0x0107
 5ba:	b0 91 08 01 	lds	r27, 0x0108
 5be:	81 50       	subi	r24, 0x01	; 1
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	af 4f       	sbci	r26, 0xFF	; 255
 5c4:	bf 4f       	sbci	r27, 0xFF	; 255
 5c6:	80 93 05 01 	sts	0x0105, r24
 5ca:	90 93 06 01 	sts	0x0106, r25
 5ce:	a0 93 07 01 	sts	0x0107, r26
 5d2:	b0 93 08 01 	sts	0x0108, r27
}
 5d6:	bf 91       	pop	r27
 5d8:	af 91       	pop	r26
 5da:	9f 91       	pop	r25
 5dc:	8f 91       	pop	r24
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_3>:
//Interrupt voor PCINT0 ECHO PIN(pinb0)
ISR (PCINT0_vect){
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	2f 93       	push	r18
 5f4:	8f 93       	push	r24
 5f6:	9f 93       	push	r25
 5f8:	af 93       	push	r26
 5fa:	bf 93       	push	r27
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
	//als echo pin aan gaat de timer starten
	if (PINB != 0x00){
 600:	83 b1       	in	r24, 0x03	; 3
 602:	88 23       	and	r24, r24
 604:	49 f0       	breq	.+18     	; 0x618 <__vector_3+0x30>

		TCCR0B |= (1<<CS00);
 606:	85 b5       	in	r24, 0x25	; 37
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	85 bd       	out	0x25, r24	; 37
		TIMSK0 |= 1<<TOIE0;
 60c:	ee e6       	ldi	r30, 0x6E	; 110
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	81 60       	ori	r24, 0x01	; 1
 614:	80 83       	st	Z, r24
 616:	1c c0       	rjmp	.+56     	; 0x650 <__vector_3+0x68>

	}//als echo pin uit gaat de timer stoppen en waarden aan countTimer0 meegeven
	else{
		
		TCCR0B &= ~(1<<CS00);
 618:	85 b5       	in	r24, 0x25	; 37
 61a:	8e 7f       	andi	r24, 0xFE	; 254
 61c:	85 bd       	out	0x25, r24	; 37
		countTimer0 += TCNT0;
 61e:	26 b5       	in	r18, 0x26	; 38
 620:	80 91 05 01 	lds	r24, 0x0105
 624:	90 91 06 01 	lds	r25, 0x0106
 628:	a0 91 07 01 	lds	r26, 0x0107
 62c:	b0 91 08 01 	lds	r27, 0x0108
 630:	82 0f       	add	r24, r18
 632:	91 1d       	adc	r25, r1
 634:	a1 1d       	adc	r26, r1
 636:	b1 1d       	adc	r27, r1
 638:	80 93 05 01 	sts	0x0105, r24
 63c:	90 93 06 01 	sts	0x0106, r25
 640:	a0 93 07 01 	sts	0x0107, r26
 644:	b0 93 08 01 	sts	0x0108, r27
		TCNT0 = 0;
 648:	16 bc       	out	0x26, r1	; 38
		//echoDone flag op 1 zetten zodat ermee kan worden gerekend
		echoDone = 1;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	80 93 09 01 	sts	0x0109, r24

	}
}
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	bf 91       	pop	r27
 656:	af 91       	pop	r26
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	2f 91       	pop	r18
 65e:	0f 90       	pop	r0
 660:	0f be       	out	0x3f, r0	; 63
 662:	0f 90       	pop	r0
 664:	1f 90       	pop	r1
 666:	18 95       	reti

00000668 <main>:

int main() {

	//Poort init
	DDRB = 0xfe;
 668:	8e ef       	ldi	r24, 0xFE	; 254
 66a:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff;
 66c:	8f ef       	ldi	r24, 0xFF	; 255
 66e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000100;
 670:	84 e0       	ldi	r24, 0x04	; 4
 672:	8b b9       	out	0x0b, r24	; 11

	//PCINT0 init
	PCICR |= (1 << PCIE0);
 674:	e8 e6       	ldi	r30, 0x68	; 104
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	81 60       	ori	r24, 0x01	; 1
 67c:	80 83       	st	Z, r24
	PCMSK0 |= (1<< PCINT0);
 67e:	eb e6       	ldi	r30, 0x6B	; 107
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	81 60       	ori	r24, 0x01	; 1
 686:	80 83       	st	Z, r24
	
	uart_init();//init serialisering
 688:	0e 94 bd 01 	call	0x37a	; 0x37a <uart_init>

	//scheduler
	SCH_Init_T1();
 68c:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	
	SCH_Add_Task(calculateAvgTemp,0,4000);
 690:	8d e6       	ldi	r24, 0x6D	; 109
 692:	92 e0       	ldi	r25, 0x02	; 2
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	40 ea       	ldi	r20, 0xA0	; 160
 69a:	5f e0       	ldi	r21, 0x0F	; 15
 69c:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(readLDR,0,3000);
 6a0:	8c e3       	ldi	r24, 0x3C	; 60
 6a2:	92 e0       	ldi	r25, 0x02	; 2
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	48 eb       	ldi	r20, 0xB8	; 184
 6aa:	5b e0       	ldi	r21, 0x0B	; 11
 6ac:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(SR04Signal,0,500);
 6b0:	86 e3       	ldi	r24, 0x36	; 54
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	44 ef       	ldi	r20, 0xF4	; 244
 6ba:	51 e0       	ldi	r21, 0x01	; 1
 6bc:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(transmitData,100,100);
 6c0:	83 ed       	ldi	r24, 0xD3	; 211
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	64 e6       	ldi	r22, 0x64	; 100
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	44 e6       	ldi	r20, 0x64	; 100
 6ca:	50 e0       	ldi	r21, 0x00	; 0
 6cc:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(input_handler,0,100);
 6d0:	8c e0       	ldi	r24, 0x0C	; 12
 6d2:	92 e0       	ldi	r25, 0x02	; 2
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	70 e0       	ldi	r23, 0x00	; 0
 6d8:	44 e6       	ldi	r20, 0x64	; 100
 6da:	50 e0       	ldi	r21, 0x00	; 0
 6dc:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Start();
 6e0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>

	//run scheduler
	while(1) {
		SCH_Dispatch_Tasks();
 6e4:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
 6e8:	fd cf       	rjmp	.-6      	; 0x6e4 <main+0x7c>

000006ea <__subsf3>:
 6ea:	50 58       	subi	r21, 0x80	; 128

000006ec <__addsf3>:
 6ec:	bb 27       	eor	r27, r27
 6ee:	aa 27       	eor	r26, r26
 6f0:	0e d0       	rcall	.+28     	; 0x70e <__addsf3x>
 6f2:	70 c1       	rjmp	.+736    	; 0x9d4 <__fp_round>
 6f4:	61 d1       	rcall	.+706    	; 0x9b8 <__fp_pscA>
 6f6:	30 f0       	brcs	.+12     	; 0x704 <__addsf3+0x18>
 6f8:	66 d1       	rcall	.+716    	; 0x9c6 <__fp_pscB>
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__addsf3+0x18>
 6fc:	31 f4       	brne	.+12     	; 0x70a <__addsf3+0x1e>
 6fe:	9f 3f       	cpi	r25, 0xFF	; 255
 700:	11 f4       	brne	.+4      	; 0x706 <__addsf3+0x1a>
 702:	1e f4       	brtc	.+6      	; 0x70a <__addsf3+0x1e>
 704:	56 c1       	rjmp	.+684    	; 0x9b2 <__fp_nan>
 706:	0e f4       	brtc	.+2      	; 0x70a <__addsf3+0x1e>
 708:	e0 95       	com	r30
 70a:	e7 fb       	bst	r30, 7
 70c:	4c c1       	rjmp	.+664    	; 0x9a6 <__fp_inf>

0000070e <__addsf3x>:
 70e:	e9 2f       	mov	r30, r25
 710:	72 d1       	rcall	.+740    	; 0x9f6 <__fp_split3>
 712:	80 f3       	brcs	.-32     	; 0x6f4 <__addsf3+0x8>
 714:	ba 17       	cp	r27, r26
 716:	62 07       	cpc	r22, r18
 718:	73 07       	cpc	r23, r19
 71a:	84 07       	cpc	r24, r20
 71c:	95 07       	cpc	r25, r21
 71e:	18 f0       	brcs	.+6      	; 0x726 <__addsf3x+0x18>
 720:	71 f4       	brne	.+28     	; 0x73e <__addsf3x+0x30>
 722:	9e f5       	brtc	.+102    	; 0x78a <__addsf3x+0x7c>
 724:	8a c1       	rjmp	.+788    	; 0xa3a <__fp_zero>
 726:	0e f4       	brtc	.+2      	; 0x72a <__addsf3x+0x1c>
 728:	e0 95       	com	r30
 72a:	0b 2e       	mov	r0, r27
 72c:	ba 2f       	mov	r27, r26
 72e:	a0 2d       	mov	r26, r0
 730:	0b 01       	movw	r0, r22
 732:	b9 01       	movw	r22, r18
 734:	90 01       	movw	r18, r0
 736:	0c 01       	movw	r0, r24
 738:	ca 01       	movw	r24, r20
 73a:	a0 01       	movw	r20, r0
 73c:	11 24       	eor	r1, r1
 73e:	ff 27       	eor	r31, r31
 740:	59 1b       	sub	r21, r25
 742:	99 f0       	breq	.+38     	; 0x76a <__addsf3x+0x5c>
 744:	59 3f       	cpi	r21, 0xF9	; 249
 746:	50 f4       	brcc	.+20     	; 0x75c <__addsf3x+0x4e>
 748:	50 3e       	cpi	r21, 0xE0	; 224
 74a:	68 f1       	brcs	.+90     	; 0x7a6 <__addsf3x+0x98>
 74c:	1a 16       	cp	r1, r26
 74e:	f0 40       	sbci	r31, 0x00	; 0
 750:	a2 2f       	mov	r26, r18
 752:	23 2f       	mov	r18, r19
 754:	34 2f       	mov	r19, r20
 756:	44 27       	eor	r20, r20
 758:	58 5f       	subi	r21, 0xF8	; 248
 75a:	f3 cf       	rjmp	.-26     	; 0x742 <__addsf3x+0x34>
 75c:	46 95       	lsr	r20
 75e:	37 95       	ror	r19
 760:	27 95       	ror	r18
 762:	a7 95       	ror	r26
 764:	f0 40       	sbci	r31, 0x00	; 0
 766:	53 95       	inc	r21
 768:	c9 f7       	brne	.-14     	; 0x75c <__addsf3x+0x4e>
 76a:	7e f4       	brtc	.+30     	; 0x78a <__addsf3x+0x7c>
 76c:	1f 16       	cp	r1, r31
 76e:	ba 0b       	sbc	r27, r26
 770:	62 0b       	sbc	r22, r18
 772:	73 0b       	sbc	r23, r19
 774:	84 0b       	sbc	r24, r20
 776:	ba f0       	brmi	.+46     	; 0x7a6 <__addsf3x+0x98>
 778:	91 50       	subi	r25, 0x01	; 1
 77a:	a1 f0       	breq	.+40     	; 0x7a4 <__addsf3x+0x96>
 77c:	ff 0f       	add	r31, r31
 77e:	bb 1f       	adc	r27, r27
 780:	66 1f       	adc	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	88 1f       	adc	r24, r24
 786:	c2 f7       	brpl	.-16     	; 0x778 <__addsf3x+0x6a>
 788:	0e c0       	rjmp	.+28     	; 0x7a6 <__addsf3x+0x98>
 78a:	ba 0f       	add	r27, r26
 78c:	62 1f       	adc	r22, r18
 78e:	73 1f       	adc	r23, r19
 790:	84 1f       	adc	r24, r20
 792:	48 f4       	brcc	.+18     	; 0x7a6 <__addsf3x+0x98>
 794:	87 95       	ror	r24
 796:	77 95       	ror	r23
 798:	67 95       	ror	r22
 79a:	b7 95       	ror	r27
 79c:	f7 95       	ror	r31
 79e:	9e 3f       	cpi	r25, 0xFE	; 254
 7a0:	08 f0       	brcs	.+2      	; 0x7a4 <__addsf3x+0x96>
 7a2:	b3 cf       	rjmp	.-154    	; 0x70a <__addsf3+0x1e>
 7a4:	93 95       	inc	r25
 7a6:	88 0f       	add	r24, r24
 7a8:	08 f0       	brcs	.+2      	; 0x7ac <__addsf3x+0x9e>
 7aa:	99 27       	eor	r25, r25
 7ac:	ee 0f       	add	r30, r30
 7ae:	97 95       	ror	r25
 7b0:	87 95       	ror	r24
 7b2:	08 95       	ret

000007b4 <__cmpsf2>:
 7b4:	d4 d0       	rcall	.+424    	; 0x95e <__fp_cmp>
 7b6:	08 f4       	brcc	.+2      	; 0x7ba <__cmpsf2+0x6>
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	08 95       	ret

000007bc <__divsf3>:
 7bc:	0c d0       	rcall	.+24     	; 0x7d6 <__divsf3x>
 7be:	0a c1       	rjmp	.+532    	; 0x9d4 <__fp_round>
 7c0:	02 d1       	rcall	.+516    	; 0x9c6 <__fp_pscB>
 7c2:	40 f0       	brcs	.+16     	; 0x7d4 <__divsf3+0x18>
 7c4:	f9 d0       	rcall	.+498    	; 0x9b8 <__fp_pscA>
 7c6:	30 f0       	brcs	.+12     	; 0x7d4 <__divsf3+0x18>
 7c8:	21 f4       	brne	.+8      	; 0x7d2 <__divsf3+0x16>
 7ca:	5f 3f       	cpi	r21, 0xFF	; 255
 7cc:	19 f0       	breq	.+6      	; 0x7d4 <__divsf3+0x18>
 7ce:	eb c0       	rjmp	.+470    	; 0x9a6 <__fp_inf>
 7d0:	51 11       	cpse	r21, r1
 7d2:	34 c1       	rjmp	.+616    	; 0xa3c <__fp_szero>
 7d4:	ee c0       	rjmp	.+476    	; 0x9b2 <__fp_nan>

000007d6 <__divsf3x>:
 7d6:	0f d1       	rcall	.+542    	; 0x9f6 <__fp_split3>
 7d8:	98 f3       	brcs	.-26     	; 0x7c0 <__divsf3+0x4>

000007da <__divsf3_pse>:
 7da:	99 23       	and	r25, r25
 7dc:	c9 f3       	breq	.-14     	; 0x7d0 <__divsf3+0x14>
 7de:	55 23       	and	r21, r21
 7e0:	b1 f3       	breq	.-20     	; 0x7ce <__divsf3+0x12>
 7e2:	95 1b       	sub	r25, r21
 7e4:	55 0b       	sbc	r21, r21
 7e6:	bb 27       	eor	r27, r27
 7e8:	aa 27       	eor	r26, r26
 7ea:	62 17       	cp	r22, r18
 7ec:	73 07       	cpc	r23, r19
 7ee:	84 07       	cpc	r24, r20
 7f0:	38 f0       	brcs	.+14     	; 0x800 <__divsf3_pse+0x26>
 7f2:	9f 5f       	subi	r25, 0xFF	; 255
 7f4:	5f 4f       	sbci	r21, 0xFF	; 255
 7f6:	22 0f       	add	r18, r18
 7f8:	33 1f       	adc	r19, r19
 7fa:	44 1f       	adc	r20, r20
 7fc:	aa 1f       	adc	r26, r26
 7fe:	a9 f3       	breq	.-22     	; 0x7ea <__divsf3_pse+0x10>
 800:	33 d0       	rcall	.+102    	; 0x868 <__divsf3_pse+0x8e>
 802:	0e 2e       	mov	r0, r30
 804:	3a f0       	brmi	.+14     	; 0x814 <__divsf3_pse+0x3a>
 806:	e0 e8       	ldi	r30, 0x80	; 128
 808:	30 d0       	rcall	.+96     	; 0x86a <__divsf3_pse+0x90>
 80a:	91 50       	subi	r25, 0x01	; 1
 80c:	50 40       	sbci	r21, 0x00	; 0
 80e:	e6 95       	lsr	r30
 810:	00 1c       	adc	r0, r0
 812:	ca f7       	brpl	.-14     	; 0x806 <__divsf3_pse+0x2c>
 814:	29 d0       	rcall	.+82     	; 0x868 <__divsf3_pse+0x8e>
 816:	fe 2f       	mov	r31, r30
 818:	27 d0       	rcall	.+78     	; 0x868 <__divsf3_pse+0x8e>
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	bb 1f       	adc	r27, r27
 822:	26 17       	cp	r18, r22
 824:	37 07       	cpc	r19, r23
 826:	48 07       	cpc	r20, r24
 828:	ab 07       	cpc	r26, r27
 82a:	b0 e8       	ldi	r27, 0x80	; 128
 82c:	09 f0       	breq	.+2      	; 0x830 <__divsf3_pse+0x56>
 82e:	bb 0b       	sbc	r27, r27
 830:	80 2d       	mov	r24, r0
 832:	bf 01       	movw	r22, r30
 834:	ff 27       	eor	r31, r31
 836:	93 58       	subi	r25, 0x83	; 131
 838:	5f 4f       	sbci	r21, 0xFF	; 255
 83a:	2a f0       	brmi	.+10     	; 0x846 <__divsf3_pse+0x6c>
 83c:	9e 3f       	cpi	r25, 0xFE	; 254
 83e:	51 05       	cpc	r21, r1
 840:	68 f0       	brcs	.+26     	; 0x85c <__divsf3_pse+0x82>
 842:	b1 c0       	rjmp	.+354    	; 0x9a6 <__fp_inf>
 844:	fb c0       	rjmp	.+502    	; 0xa3c <__fp_szero>
 846:	5f 3f       	cpi	r21, 0xFF	; 255
 848:	ec f3       	brlt	.-6      	; 0x844 <__divsf3_pse+0x6a>
 84a:	98 3e       	cpi	r25, 0xE8	; 232
 84c:	dc f3       	brlt	.-10     	; 0x844 <__divsf3_pse+0x6a>
 84e:	86 95       	lsr	r24
 850:	77 95       	ror	r23
 852:	67 95       	ror	r22
 854:	b7 95       	ror	r27
 856:	f7 95       	ror	r31
 858:	9f 5f       	subi	r25, 0xFF	; 255
 85a:	c9 f7       	brne	.-14     	; 0x84e <__divsf3_pse+0x74>
 85c:	88 0f       	add	r24, r24
 85e:	91 1d       	adc	r25, r1
 860:	96 95       	lsr	r25
 862:	87 95       	ror	r24
 864:	97 f9       	bld	r25, 7
 866:	08 95       	ret
 868:	e1 e0       	ldi	r30, 0x01	; 1
 86a:	66 0f       	add	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	88 1f       	adc	r24, r24
 870:	bb 1f       	adc	r27, r27
 872:	62 17       	cp	r22, r18
 874:	73 07       	cpc	r23, r19
 876:	84 07       	cpc	r24, r20
 878:	ba 07       	cpc	r27, r26
 87a:	20 f0       	brcs	.+8      	; 0x884 <__divsf3_pse+0xaa>
 87c:	62 1b       	sub	r22, r18
 87e:	73 0b       	sbc	r23, r19
 880:	84 0b       	sbc	r24, r20
 882:	ba 0b       	sbc	r27, r26
 884:	ee 1f       	adc	r30, r30
 886:	88 f7       	brcc	.-30     	; 0x86a <__divsf3_pse+0x90>
 888:	e0 95       	com	r30
 88a:	08 95       	ret

0000088c <__fixunssfsi>:
 88c:	bc d0       	rcall	.+376    	; 0xa06 <__fp_splitA>
 88e:	88 f0       	brcs	.+34     	; 0x8b2 <__fixunssfsi+0x26>
 890:	9f 57       	subi	r25, 0x7F	; 127
 892:	90 f0       	brcs	.+36     	; 0x8b8 <__fixunssfsi+0x2c>
 894:	b9 2f       	mov	r27, r25
 896:	99 27       	eor	r25, r25
 898:	b7 51       	subi	r27, 0x17	; 23
 89a:	a0 f0       	brcs	.+40     	; 0x8c4 <__fixunssfsi+0x38>
 89c:	d1 f0       	breq	.+52     	; 0x8d2 <__fixunssfsi+0x46>
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	1a f0       	brmi	.+6      	; 0x8ae <__fixunssfsi+0x22>
 8a8:	ba 95       	dec	r27
 8aa:	c9 f7       	brne	.-14     	; 0x89e <__fixunssfsi+0x12>
 8ac:	12 c0       	rjmp	.+36     	; 0x8d2 <__fixunssfsi+0x46>
 8ae:	b1 30       	cpi	r27, 0x01	; 1
 8b0:	81 f0       	breq	.+32     	; 0x8d2 <__fixunssfsi+0x46>
 8b2:	c3 d0       	rcall	.+390    	; 0xa3a <__fp_zero>
 8b4:	b1 e0       	ldi	r27, 0x01	; 1
 8b6:	08 95       	ret
 8b8:	c0 c0       	rjmp	.+384    	; 0xa3a <__fp_zero>
 8ba:	67 2f       	mov	r22, r23
 8bc:	78 2f       	mov	r23, r24
 8be:	88 27       	eor	r24, r24
 8c0:	b8 5f       	subi	r27, 0xF8	; 248
 8c2:	39 f0       	breq	.+14     	; 0x8d2 <__fixunssfsi+0x46>
 8c4:	b9 3f       	cpi	r27, 0xF9	; 249
 8c6:	cc f3       	brlt	.-14     	; 0x8ba <__fixunssfsi+0x2e>
 8c8:	86 95       	lsr	r24
 8ca:	77 95       	ror	r23
 8cc:	67 95       	ror	r22
 8ce:	b3 95       	inc	r27
 8d0:	d9 f7       	brne	.-10     	; 0x8c8 <__fixunssfsi+0x3c>
 8d2:	3e f4       	brtc	.+14     	; 0x8e2 <__fixunssfsi+0x56>
 8d4:	90 95       	com	r25
 8d6:	80 95       	com	r24
 8d8:	70 95       	com	r23
 8da:	61 95       	neg	r22
 8dc:	7f 4f       	sbci	r23, 0xFF	; 255
 8de:	8f 4f       	sbci	r24, 0xFF	; 255
 8e0:	9f 4f       	sbci	r25, 0xFF	; 255
 8e2:	08 95       	ret

000008e4 <__floatunsisf>:
 8e4:	e8 94       	clt
 8e6:	09 c0       	rjmp	.+18     	; 0x8fa <__floatsisf+0x12>

000008e8 <__floatsisf>:
 8e8:	97 fb       	bst	r25, 7
 8ea:	3e f4       	brtc	.+14     	; 0x8fa <__floatsisf+0x12>
 8ec:	90 95       	com	r25
 8ee:	80 95       	com	r24
 8f0:	70 95       	com	r23
 8f2:	61 95       	neg	r22
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	8f 4f       	sbci	r24, 0xFF	; 255
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	99 23       	and	r25, r25
 8fc:	a9 f0       	breq	.+42     	; 0x928 <__stack+0x29>
 8fe:	f9 2f       	mov	r31, r25
 900:	96 e9       	ldi	r25, 0x96	; 150
 902:	bb 27       	eor	r27, r27
 904:	93 95       	inc	r25
 906:	f6 95       	lsr	r31
 908:	87 95       	ror	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	b7 95       	ror	r27
 910:	f1 11       	cpse	r31, r1
 912:	f8 cf       	rjmp	.-16     	; 0x904 <__stack+0x5>
 914:	fa f4       	brpl	.+62     	; 0x954 <__stack+0x55>
 916:	bb 0f       	add	r27, r27
 918:	11 f4       	brne	.+4      	; 0x91e <__stack+0x1f>
 91a:	60 ff       	sbrs	r22, 0
 91c:	1b c0       	rjmp	.+54     	; 0x954 <__stack+0x55>
 91e:	6f 5f       	subi	r22, 0xFF	; 255
 920:	7f 4f       	sbci	r23, 0xFF	; 255
 922:	8f 4f       	sbci	r24, 0xFF	; 255
 924:	9f 4f       	sbci	r25, 0xFF	; 255
 926:	16 c0       	rjmp	.+44     	; 0x954 <__stack+0x55>
 928:	88 23       	and	r24, r24
 92a:	11 f0       	breq	.+4      	; 0x930 <__stack+0x31>
 92c:	96 e9       	ldi	r25, 0x96	; 150
 92e:	11 c0       	rjmp	.+34     	; 0x952 <__stack+0x53>
 930:	77 23       	and	r23, r23
 932:	21 f0       	breq	.+8      	; 0x93c <__stack+0x3d>
 934:	9e e8       	ldi	r25, 0x8E	; 142
 936:	87 2f       	mov	r24, r23
 938:	76 2f       	mov	r23, r22
 93a:	05 c0       	rjmp	.+10     	; 0x946 <__stack+0x47>
 93c:	66 23       	and	r22, r22
 93e:	71 f0       	breq	.+28     	; 0x95c <__stack+0x5d>
 940:	96 e8       	ldi	r25, 0x86	; 134
 942:	86 2f       	mov	r24, r22
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	2a f0       	brmi	.+10     	; 0x954 <__stack+0x55>
 94a:	9a 95       	dec	r25
 94c:	66 0f       	add	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	da f7       	brpl	.-10     	; 0x94a <__stack+0x4b>
 954:	88 0f       	add	r24, r24
 956:	96 95       	lsr	r25
 958:	87 95       	ror	r24
 95a:	97 f9       	bld	r25, 7
 95c:	08 95       	ret

0000095e <__fp_cmp>:
 95e:	99 0f       	add	r25, r25
 960:	00 08       	sbc	r0, r0
 962:	55 0f       	add	r21, r21
 964:	aa 0b       	sbc	r26, r26
 966:	e0 e8       	ldi	r30, 0x80	; 128
 968:	fe ef       	ldi	r31, 0xFE	; 254
 96a:	16 16       	cp	r1, r22
 96c:	17 06       	cpc	r1, r23
 96e:	e8 07       	cpc	r30, r24
 970:	f9 07       	cpc	r31, r25
 972:	c0 f0       	brcs	.+48     	; 0x9a4 <__fp_cmp+0x46>
 974:	12 16       	cp	r1, r18
 976:	13 06       	cpc	r1, r19
 978:	e4 07       	cpc	r30, r20
 97a:	f5 07       	cpc	r31, r21
 97c:	98 f0       	brcs	.+38     	; 0x9a4 <__fp_cmp+0x46>
 97e:	62 1b       	sub	r22, r18
 980:	73 0b       	sbc	r23, r19
 982:	84 0b       	sbc	r24, r20
 984:	95 0b       	sbc	r25, r21
 986:	39 f4       	brne	.+14     	; 0x996 <__fp_cmp+0x38>
 988:	0a 26       	eor	r0, r26
 98a:	61 f0       	breq	.+24     	; 0x9a4 <__fp_cmp+0x46>
 98c:	23 2b       	or	r18, r19
 98e:	24 2b       	or	r18, r20
 990:	25 2b       	or	r18, r21
 992:	21 f4       	brne	.+8      	; 0x99c <__fp_cmp+0x3e>
 994:	08 95       	ret
 996:	0a 26       	eor	r0, r26
 998:	09 f4       	brne	.+2      	; 0x99c <__fp_cmp+0x3e>
 99a:	a1 40       	sbci	r26, 0x01	; 1
 99c:	a6 95       	lsr	r26
 99e:	8f ef       	ldi	r24, 0xFF	; 255
 9a0:	81 1d       	adc	r24, r1
 9a2:	81 1d       	adc	r24, r1
 9a4:	08 95       	ret

000009a6 <__fp_inf>:
 9a6:	97 f9       	bld	r25, 7
 9a8:	9f 67       	ori	r25, 0x7F	; 127
 9aa:	80 e8       	ldi	r24, 0x80	; 128
 9ac:	70 e0       	ldi	r23, 0x00	; 0
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	08 95       	ret

000009b2 <__fp_nan>:
 9b2:	9f ef       	ldi	r25, 0xFF	; 255
 9b4:	80 ec       	ldi	r24, 0xC0	; 192
 9b6:	08 95       	ret

000009b8 <__fp_pscA>:
 9b8:	00 24       	eor	r0, r0
 9ba:	0a 94       	dec	r0
 9bc:	16 16       	cp	r1, r22
 9be:	17 06       	cpc	r1, r23
 9c0:	18 06       	cpc	r1, r24
 9c2:	09 06       	cpc	r0, r25
 9c4:	08 95       	ret

000009c6 <__fp_pscB>:
 9c6:	00 24       	eor	r0, r0
 9c8:	0a 94       	dec	r0
 9ca:	12 16       	cp	r1, r18
 9cc:	13 06       	cpc	r1, r19
 9ce:	14 06       	cpc	r1, r20
 9d0:	05 06       	cpc	r0, r21
 9d2:	08 95       	ret

000009d4 <__fp_round>:
 9d4:	09 2e       	mov	r0, r25
 9d6:	03 94       	inc	r0
 9d8:	00 0c       	add	r0, r0
 9da:	11 f4       	brne	.+4      	; 0x9e0 <__fp_round+0xc>
 9dc:	88 23       	and	r24, r24
 9de:	52 f0       	brmi	.+20     	; 0x9f4 <__fp_round+0x20>
 9e0:	bb 0f       	add	r27, r27
 9e2:	40 f4       	brcc	.+16     	; 0x9f4 <__fp_round+0x20>
 9e4:	bf 2b       	or	r27, r31
 9e6:	11 f4       	brne	.+4      	; 0x9ec <__fp_round+0x18>
 9e8:	60 ff       	sbrs	r22, 0
 9ea:	04 c0       	rjmp	.+8      	; 0x9f4 <__fp_round+0x20>
 9ec:	6f 5f       	subi	r22, 0xFF	; 255
 9ee:	7f 4f       	sbci	r23, 0xFF	; 255
 9f0:	8f 4f       	sbci	r24, 0xFF	; 255
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	08 95       	ret

000009f6 <__fp_split3>:
 9f6:	57 fd       	sbrc	r21, 7
 9f8:	90 58       	subi	r25, 0x80	; 128
 9fa:	44 0f       	add	r20, r20
 9fc:	55 1f       	adc	r21, r21
 9fe:	59 f0       	breq	.+22     	; 0xa16 <__fp_splitA+0x10>
 a00:	5f 3f       	cpi	r21, 0xFF	; 255
 a02:	71 f0       	breq	.+28     	; 0xa20 <__fp_splitA+0x1a>
 a04:	47 95       	ror	r20

00000a06 <__fp_splitA>:
 a06:	88 0f       	add	r24, r24
 a08:	97 fb       	bst	r25, 7
 a0a:	99 1f       	adc	r25, r25
 a0c:	61 f0       	breq	.+24     	; 0xa26 <__fp_splitA+0x20>
 a0e:	9f 3f       	cpi	r25, 0xFF	; 255
 a10:	79 f0       	breq	.+30     	; 0xa30 <__fp_splitA+0x2a>
 a12:	87 95       	ror	r24
 a14:	08 95       	ret
 a16:	12 16       	cp	r1, r18
 a18:	13 06       	cpc	r1, r19
 a1a:	14 06       	cpc	r1, r20
 a1c:	55 1f       	adc	r21, r21
 a1e:	f2 cf       	rjmp	.-28     	; 0xa04 <__fp_split3+0xe>
 a20:	46 95       	lsr	r20
 a22:	f1 df       	rcall	.-30     	; 0xa06 <__fp_splitA>
 a24:	08 c0       	rjmp	.+16     	; 0xa36 <__fp_splitA+0x30>
 a26:	16 16       	cp	r1, r22
 a28:	17 06       	cpc	r1, r23
 a2a:	18 06       	cpc	r1, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	f1 cf       	rjmp	.-30     	; 0xa12 <__fp_splitA+0xc>
 a30:	86 95       	lsr	r24
 a32:	71 05       	cpc	r23, r1
 a34:	61 05       	cpc	r22, r1
 a36:	08 94       	sec
 a38:	08 95       	ret

00000a3a <__fp_zero>:
 a3a:	e8 94       	clt

00000a3c <__fp_szero>:
 a3c:	bb 27       	eor	r27, r27
 a3e:	66 27       	eor	r22, r22
 a40:	77 27       	eor	r23, r23
 a42:	cb 01       	movw	r24, r22
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <__gesf2>:
 a48:	8a df       	rcall	.-236    	; 0x95e <__fp_cmp>
 a4a:	08 f4       	brcc	.+2      	; 0xa4e <__gesf2+0x6>
 a4c:	8f ef       	ldi	r24, 0xFF	; 255
 a4e:	08 95       	ret

00000a50 <__mulsf3>:
 a50:	0b d0       	rcall	.+22     	; 0xa68 <__mulsf3x>
 a52:	c0 cf       	rjmp	.-128    	; 0x9d4 <__fp_round>
 a54:	b1 df       	rcall	.-158    	; 0x9b8 <__fp_pscA>
 a56:	28 f0       	brcs	.+10     	; 0xa62 <__mulsf3+0x12>
 a58:	b6 df       	rcall	.-148    	; 0x9c6 <__fp_pscB>
 a5a:	18 f0       	brcs	.+6      	; 0xa62 <__mulsf3+0x12>
 a5c:	95 23       	and	r25, r21
 a5e:	09 f0       	breq	.+2      	; 0xa62 <__mulsf3+0x12>
 a60:	a2 cf       	rjmp	.-188    	; 0x9a6 <__fp_inf>
 a62:	a7 cf       	rjmp	.-178    	; 0x9b2 <__fp_nan>
 a64:	11 24       	eor	r1, r1
 a66:	ea cf       	rjmp	.-44     	; 0xa3c <__fp_szero>

00000a68 <__mulsf3x>:
 a68:	c6 df       	rcall	.-116    	; 0x9f6 <__fp_split3>
 a6a:	a0 f3       	brcs	.-24     	; 0xa54 <__mulsf3+0x4>

00000a6c <__mulsf3_pse>:
 a6c:	95 9f       	mul	r25, r21
 a6e:	d1 f3       	breq	.-12     	; 0xa64 <__mulsf3+0x14>
 a70:	95 0f       	add	r25, r21
 a72:	50 e0       	ldi	r21, 0x00	; 0
 a74:	55 1f       	adc	r21, r21
 a76:	62 9f       	mul	r22, r18
 a78:	f0 01       	movw	r30, r0
 a7a:	72 9f       	mul	r23, r18
 a7c:	bb 27       	eor	r27, r27
 a7e:	f0 0d       	add	r31, r0
 a80:	b1 1d       	adc	r27, r1
 a82:	63 9f       	mul	r22, r19
 a84:	aa 27       	eor	r26, r26
 a86:	f0 0d       	add	r31, r0
 a88:	b1 1d       	adc	r27, r1
 a8a:	aa 1f       	adc	r26, r26
 a8c:	64 9f       	mul	r22, r20
 a8e:	66 27       	eor	r22, r22
 a90:	b0 0d       	add	r27, r0
 a92:	a1 1d       	adc	r26, r1
 a94:	66 1f       	adc	r22, r22
 a96:	82 9f       	mul	r24, r18
 a98:	22 27       	eor	r18, r18
 a9a:	b0 0d       	add	r27, r0
 a9c:	a1 1d       	adc	r26, r1
 a9e:	62 1f       	adc	r22, r18
 aa0:	73 9f       	mul	r23, r19
 aa2:	b0 0d       	add	r27, r0
 aa4:	a1 1d       	adc	r26, r1
 aa6:	62 1f       	adc	r22, r18
 aa8:	83 9f       	mul	r24, r19
 aaa:	a0 0d       	add	r26, r0
 aac:	61 1d       	adc	r22, r1
 aae:	22 1f       	adc	r18, r18
 ab0:	74 9f       	mul	r23, r20
 ab2:	33 27       	eor	r19, r19
 ab4:	a0 0d       	add	r26, r0
 ab6:	61 1d       	adc	r22, r1
 ab8:	23 1f       	adc	r18, r19
 aba:	84 9f       	mul	r24, r20
 abc:	60 0d       	add	r22, r0
 abe:	21 1d       	adc	r18, r1
 ac0:	82 2f       	mov	r24, r18
 ac2:	76 2f       	mov	r23, r22
 ac4:	6a 2f       	mov	r22, r26
 ac6:	11 24       	eor	r1, r1
 ac8:	9f 57       	subi	r25, 0x7F	; 127
 aca:	50 40       	sbci	r21, 0x00	; 0
 acc:	8a f0       	brmi	.+34     	; 0xaf0 <__mulsf3_pse+0x84>
 ace:	e1 f0       	breq	.+56     	; 0xb08 <__mulsf3_pse+0x9c>
 ad0:	88 23       	and	r24, r24
 ad2:	4a f0       	brmi	.+18     	; 0xae6 <__mulsf3_pse+0x7a>
 ad4:	ee 0f       	add	r30, r30
 ad6:	ff 1f       	adc	r31, r31
 ad8:	bb 1f       	adc	r27, r27
 ada:	66 1f       	adc	r22, r22
 adc:	77 1f       	adc	r23, r23
 ade:	88 1f       	adc	r24, r24
 ae0:	91 50       	subi	r25, 0x01	; 1
 ae2:	50 40       	sbci	r21, 0x00	; 0
 ae4:	a9 f7       	brne	.-22     	; 0xad0 <__mulsf3_pse+0x64>
 ae6:	9e 3f       	cpi	r25, 0xFE	; 254
 ae8:	51 05       	cpc	r21, r1
 aea:	70 f0       	brcs	.+28     	; 0xb08 <__mulsf3_pse+0x9c>
 aec:	5c cf       	rjmp	.-328    	; 0x9a6 <__fp_inf>
 aee:	a6 cf       	rjmp	.-180    	; 0xa3c <__fp_szero>
 af0:	5f 3f       	cpi	r21, 0xFF	; 255
 af2:	ec f3       	brlt	.-6      	; 0xaee <__mulsf3_pse+0x82>
 af4:	98 3e       	cpi	r25, 0xE8	; 232
 af6:	dc f3       	brlt	.-10     	; 0xaee <__mulsf3_pse+0x82>
 af8:	86 95       	lsr	r24
 afa:	77 95       	ror	r23
 afc:	67 95       	ror	r22
 afe:	b7 95       	ror	r27
 b00:	f7 95       	ror	r31
 b02:	e7 95       	ror	r30
 b04:	9f 5f       	subi	r25, 0xFF	; 255
 b06:	c1 f7       	brne	.-16     	; 0xaf8 <__mulsf3_pse+0x8c>
 b08:	fe 2b       	or	r31, r30
 b0a:	88 0f       	add	r24, r24
 b0c:	91 1d       	adc	r25, r1
 b0e:	96 95       	lsr	r25
 b10:	87 95       	ror	r24
 b12:	97 f9       	bld	r25, 7
 b14:	08 95       	ret

00000b16 <_exit>:
 b16:	f8 94       	cli

00000b18 <__stop_program>:
 b18:	ff cf       	rjmp	.-2      	; 0xb18 <__stop_program>
