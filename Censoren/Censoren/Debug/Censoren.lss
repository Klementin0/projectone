
Censoren.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000097e  00000a12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800100  00800100  00000a12  2**0
                  ALLOC
  3 .stab         000023dc  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00003558  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000888  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000351  00000000  00000000  00003e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fe  00000000  00000000  000041d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000046d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000314  00000000  00000000  000048c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000548  00000000  00000000  00004bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <main>
  9e:	0c 94 bd 04 	jmp	0x97a	; 0x97a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
  b0:	eb 01       	movw	r28, r22
  b2:	da 01       	movw	r26, r20
  b4:	80 91 0b 01 	lds	r24, 0x010B
  b8:	90 91 0c 01 	lds	r25, 0x010C
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
  c0:	e2 e1       	ldi	r30, 0x12	; 18
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	42 2f       	mov	r20, r18
  ca:	b9 01       	movw	r22, r18
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <SCH_Add_Task+0x3e>
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	37 96       	adiw	r30, 0x07	; 7
  da:	26 30       	cpi	r18, 0x06	; 6
  dc:	31 05       	cpc	r19, r1
  de:	a1 f7       	brne	.-24     	; 0xc8 <SCH_Add_Task+0x22>
  e0:	84 2f       	mov	r24, r20
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SCH_Add_Task+0x40>
  e4:	82 2f       	mov	r24, r18
  e6:	85 30       	cpi	r24, 0x05	; 5
  e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x4c>
  ea:	17 c0       	rjmp	.+46     	; 0x11a <SCH_Add_Task+0x74>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	86 1b       	sub	r24, r22
 102:	97 0b       	sbc	r25, r23
 104:	fc 01       	movw	r30, r24
 106:	e5 5f       	subi	r30, 0xF5	; 245
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	11 83       	std	Z+1, r17	; 0x01
 10c:	00 83       	st	Z, r16
 10e:	d3 83       	std	Z+3, r29	; 0x03
 110:	c2 83       	std	Z+2, r28	; 0x02
 112:	b5 83       	std	Z+5, r27	; 0x05
 114:	a4 83       	std	Z+4, r26	; 0x04
 116:	16 82       	std	Z+6, r1	; 0x06
 118:	84 2f       	mov	r24, r20
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <SCH_Delete_Task>:
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 1b       	sub	r30, r24
 136:	f9 0b       	sbc	r31, r25
 138:	e5 5f       	subi	r30, 0xF5	; 245
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	10 82       	st	Z, r1
 140:	13 82       	std	Z+3, r1	; 0x03
 142:	12 82       	std	Z+2, r1	; 0x02
 144:	15 82       	std	Z+5, r1	; 0x05
 146:	14 82       	std	Z+4, r1	; 0x04
 148:	16 82       	std	Z+6, r1	; 0x06
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret

0000014e <SCH_Dispatch_Tasks>:
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	c1 e1       	ldi	r28, 0x11	; 17
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	0f 2e       	mov	r0, r31
 162:	fa ef       	ldi	r31, 0xFA	; 250
 164:	ef 2e       	mov	r14, r31
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	ff 2e       	mov	r15, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	ec 0e       	add	r14, r28
 16e:	fd 1e       	adc	r15, r29
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	91 f0       	breq	.+36     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 178:	d7 01       	movw	r26, r14
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	61 f0       	breq	.+24     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 184:	09 95       	icall
 186:	88 81       	ld	r24, Y
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	88 83       	st	Y, r24
 18c:	f7 01       	movw	r30, r14
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	19 f4       	brne	.+6      	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 196:	81 2f       	mov	r24, r17
 198:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	27 96       	adiw	r28, 0x07	; 7
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	15 30       	cpi	r17, 0x05	; 5
 1aa:	19 f7       	brne	.-58     	; 0x172 <SCH_Dispatch_Tasks+0x24>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <SCH_Init_T1>:
 1bc:	cf 93       	push	r28
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	c5 30       	cpi	r28, 0x05	; 5
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <SCH_Init_T1+0x4>
 1cc:	81 e7       	ldi	r24, 0x71	; 113
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	90 93 89 00 	sts	0x0089, r25
 1d4:	80 93 88 00 	sts	0x0088, r24
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	80 93 81 00 	sts	0x0081, r24
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 6f 00 	sts	0x006F, r24
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <SCH_Start>:
 1e8:	78 94       	sei
 1ea:	08 95       	ret

000001ec <__vector_11>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	eb e0       	ldi	r30, 0x0B	; 11
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	df 01       	movw	r26, r30
 210:	16 96       	adiw	r26, 0x06	; 6
 212:	9f 01       	movw	r18, r30
 214:	2d 5d       	subi	r18, 0xDD	; 221
 216:	3f 4f       	sbci	r19, 0xFF	; 255
 218:	80 81       	ld	r24, Z
 21a:	91 81       	ldd	r25, Z+1	; 0x01
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	91 f0       	breq	.+36     	; 0x244 <__vector_11+0x58>
 220:	82 81       	ldd	r24, Z+2	; 0x02
 222:	93 81       	ldd	r25, Z+3	; 0x03
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	59 f4       	brne	.+22     	; 0x23e <__vector_11+0x52>
 228:	8c 91       	ld	r24, X
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	8c 93       	st	X, r24
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	39 f0       	breq	.+14     	; 0x244 <__vector_11+0x58>
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	93 83       	std	Z+3, r25	; 0x03
 23a:	82 83       	std	Z+2, r24	; 0x02
 23c:	03 c0       	rjmp	.+6      	; 0x244 <__vector_11+0x58>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	93 83       	std	Z+3, r25	; 0x03
 242:	82 83       	std	Z+2, r24	; 0x02
 244:	37 96       	adiw	r30, 0x07	; 7
 246:	17 96       	adiw	r26, 0x07	; 7
 248:	e2 17       	cp	r30, r18
 24a:	f3 07       	cpc	r31, r19
 24c:	29 f7       	brne	.-54     	; 0x218 <__vector_11+0x2c>
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <uart_init>:


//serialisering
void uart_init() {
	// set the baud rate
	UBRR0H = 19200;
 26c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
 270:	83 e3       	ldi	r24, 0x33	; 51
 272:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
 276:	10 92 c0 00 	sts	0x00C0, r1
	// enable transmitter and receiver
	UCSR0B = _BV(TXEN0)|_BV(RXEN0);
 27a:	88 e1       	ldi	r24, 0x18	; 24
 27c:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	80 93 c2 00 	sts	0x00C2, r24
}
 286:	08 95       	ret

00000288 <transmit>:
//transmitten naar Realterm/Putty/Centrale
void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 288:	e0 ec       	ldi	r30, 0xC0	; 192
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	90 81       	ld	r25, Z
 28e:	95 ff       	sbrs	r25, 5
 290:	fd cf       	rjmp	.-6      	; 0x28c <transmit+0x4>
	// send the data
	UDR0 = data;
 292:	80 93 c6 00 	sts	0x00C6, r24
}
 296:	08 95       	ret

00000298 <SR04Signal>:
	}
	transmit(LIGHT);	//Verstuur de status(licht/donker)
}

//zend sr04 signaal en reken hiermee
void SR04Signal(){
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29

	float distance = 0.00;

	//echoDone is een boolean die checkt of de echo klaar is
	//Als de echo pas klaar is mag ermee worden gerekend
	echoDone = 0;
 2a0:	10 92 0a 01 	sts	0x010A, r1

	//Timer0 counter wordt gereset
	countTimer0 = 0;
 2a4:	10 92 06 01 	sts	0x0106, r1
 2a8:	10 92 07 01 	sts	0x0107, r1
 2ac:	10 92 08 01 	sts	0x0108, r1
 2b0:	10 92 09 01 	sts	0x0109, r1


	//pulse sturen naar de trigger
	PORTB = 0x00;
 2b4:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	8f e3       	ldi	r24, 0x3F	; 63
 2b8:	9f e1       	ldi	r25, 0x1F	; 31
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <SR04Signal+0x22>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <SR04Signal+0x28>
 2c0:	00 00       	nop
	_delay_ms(2);
	PORTB = 0xff;
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	95 e3       	ldi	r25, 0x35	; 53
 2c8:	9a 95       	dec	r25
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <SR04Signal+0x30>
 2cc:	00 00       	nop
	_delay_us(10);
	PORTB = 0x00;
 2ce:	15 b8       	out	0x05, r1	; 5

	//check of echo weer low is
	while (!echoDone);
 2d0:	80 91 0a 01 	lds	r24, 0x010A
 2d4:	88 23       	and	r24, r24
 2d6:	e1 f3       	breq	.-8      	; 0x2d0 <SR04Signal+0x38>

	//berekening afstand
	distance = countTimer0/16E6;
 2d8:	60 91 06 01 	lds	r22, 0x0106
 2dc:	70 91 07 01 	lds	r23, 0x0107
 2e0:	80 91 08 01 	lds	r24, 0x0108
 2e4:	90 91 09 01 	lds	r25, 0x0109
 2e8:	0e 94 a4 03 	call	0x748	; 0x748 <__floatunsisf>
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	34 e2       	ldi	r19, 0x24	; 36
 2f0:	44 e7       	ldi	r20, 0x74	; 116
 2f2:	5b e4       	ldi	r21, 0x4B	; 75
 2f4:	0e 94 10 03 	call	0x620	; 0x620 <__divsf3>
	distance = 17013.0*distance;
 2f8:	46 2f       	mov	r20, r22
 2fa:	57 2f       	mov	r21, r23
 2fc:	68 2f       	mov	r22, r24
 2fe:	79 2f       	mov	r23, r25
 300:	cb 01       	movw	r24, r22
 302:	ba 01       	movw	r22, r20
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	3a ee       	ldi	r19, 0xEA	; 234
 308:	44 e8       	ldi	r20, 0x84	; 132
 30a:	56 e4       	ldi	r21, 0x46	; 70
 30c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__mulsf3>
 310:	06 2f       	mov	r16, r22
 312:	17 2f       	mov	r17, r23
 314:	d8 2f       	mov	r29, r24
 316:	c9 2f       	mov	r28, r25

	//verzenden naar serial
	if(distance <= 4){transmit(4);}
 318:	86 2f       	mov	r24, r22
 31a:	91 2f       	mov	r25, r17
 31c:	ad 2f       	mov	r26, r29
 31e:	bc 2f       	mov	r27, r28
 320:	bc 01       	movw	r22, r24
 322:	cd 01       	movw	r24, r26
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 e8       	ldi	r20, 0x80	; 128
 32a:	50 e4       	ldi	r21, 0x40	; 64
 32c:	0e 94 0c 03 	call	0x618	; 0x618 <__cmpsf2>
 330:	18 16       	cp	r1, r24
 332:	24 f0       	brlt	.+8      	; 0x33c <SR04Signal+0xa4>
 334:	84 e0       	ldi	r24, 0x04	; 4
 336:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
 33a:	1d c0       	rjmp	.+58     	; 0x376 <SR04Signal+0xde>
	else if(distance > 160){transmit(161);}
 33c:	80 2f       	mov	r24, r16
 33e:	91 2f       	mov	r25, r17
 340:	ad 2f       	mov	r26, r29
 342:	bc 2f       	mov	r27, r28
 344:	bc 01       	movw	r22, r24
 346:	cd 01       	movw	r24, r26
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	40 e2       	ldi	r20, 0x20	; 32
 34e:	53 e4       	ldi	r21, 0x43	; 67
 350:	0e 94 56 04 	call	0x8ac	; 0x8ac <__gesf2>
 354:	18 16       	cp	r1, r24
 356:	24 f4       	brge	.+8      	; 0x360 <SR04Signal+0xc8>
 358:	81 ea       	ldi	r24, 0xA1	; 161
 35a:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
 35e:	0b c0       	rjmp	.+22     	; 0x376 <SR04Signal+0xde>
	else{transmit(distance);}
 360:	80 2f       	mov	r24, r16
 362:	91 2f       	mov	r25, r17
 364:	ad 2f       	mov	r26, r29
 366:	bc 2f       	mov	r27, r28
 368:	bc 01       	movw	r22, r24
 36a:	cd 01       	movw	r24, r26
 36c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fixunssfsi>
 370:	86 2f       	mov	r24, r22
 372:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
	
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <ADCsingleREAD>:
//AnalogRead
int ADCsingleREAD(uint8_t adctouse)
{
	int ADCval;

	ADMUX = adctouse;         // use #1 ADC
 380:	ec e7       	ldi	r30, 0x7C	; 124
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
 386:	80 81       	ld	r24, Z
 388:	80 64       	ori	r24, 0x40	; 64
 38a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
 38c:	80 81       	ld	r24, Z
 38e:	8f 7d       	andi	r24, 0xDF	; 223
 390:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
 392:	ea e7       	ldi	r30, 0x7A	; 122
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	87 60       	ori	r24, 0x07	; 7
 39a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
 39c:	80 81       	ld	r24, Z
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
 3a2:	80 81       	ld	r24, Z
 3a4:	80 64       	ori	r24, 0x40	; 64
 3a6:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
 3a8:	80 81       	ld	r24, Z
 3aa:	86 fd       	sbrc	r24, 6
 3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <ADCsingleREAD+0x28>


	ADCval = ADCL;
 3ae:	20 91 78 00 	lds	r18, 0x0078
		ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
 3b2:	30 91 79 00 	lds	r19, 0x0079
 3b6:	93 2f       	mov	r25, r19
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	82 0f       	add	r24, r18
 3bc:	91 1d       	adc	r25, r1

	return ADCval;
}
 3be:	08 95       	ret

000003c0 <readLDR>:
//lichtsensor
int readLDR()
{
	int ADCvalue;	//int variabele ADCValue aanmaken
	int LIGHT;	//int variabele LIGHT aanmaken
	ADCvalue = ADCsingleREAD(1);	//Lees de ADC uit voor pin 1 en sla deze op in ADCValue
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 c0 01 	call	0x380	; 0x380 <ADCsingleREAD>
	}
	if (ADCvalue > 100)
	{
		LIGHT = 1;
	}
	transmit(LIGHT);	//Verstuur de status(licht/donker)
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	85 36       	cpi	r24, 0x65	; 101
 3ca:	91 05       	cpc	r25, r1
 3cc:	0c f4       	brge	.+2      	; 0x3d0 <readLDR+0x10>
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	82 2f       	mov	r24, r18
 3d2:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
}
 3d6:	08 95       	ret

000003d8 <readTemp>:
}
//Temp sensor
int readTemp()
{
	int ADCvalue;	//int variabele ADCValue aanmaken
	ADCvalue = ADCsingleREAD(0);	//Lees de ADC uit voor pin 0 en sla deze op in ADCValue
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 c0 01 	call	0x380	; 0x380 <ADCsingleREAD>
    float temperatuur = 0.00;	//Float variabele aanmaken voor het berekenen van- en opslaan van temperatuur
	temperatuur = ((ADCvalue * (5000.0/1024.0)) - 500.0) /10.0;	//Temperatuur berekenen uit ADCValue
 3de:	9c 01       	movw	r18, r24
 3e0:	b9 01       	movw	r22, r18
 3e2:	88 27       	eor	r24, r24
 3e4:	77 fd       	sbrc	r23, 7
 3e6:	80 95       	com	r24
 3e8:	98 2f       	mov	r25, r24
 3ea:	0e 94 a6 03 	call	0x74c	; 0x74c <__floatsisf>
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	30 e4       	ldi	r19, 0x40	; 64
 3f2:	4c e9       	ldi	r20, 0x9C	; 156
 3f4:	50 e4       	ldi	r21, 0x40	; 64
 3f6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__mulsf3>
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	4a ef       	ldi	r20, 0xFA	; 250
 400:	53 e4       	ldi	r21, 0x43	; 67
 402:	0e 94 a7 02 	call	0x54e	; 0x54e <__subsf3>
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	40 e2       	ldi	r20, 0x20	; 32
 40c:	51 e4       	ldi	r21, 0x41	; 65
 40e:	0e 94 10 03 	call	0x620	; 0x620 <__divsf3>
	transmit(temperatuur);	//Verstuur de temperatuur via seriele verbinding.
 412:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fixunssfsi>
 416:	86 2f       	mov	r24, r22
 418:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
}
 41c:	08 95       	ret

0000041e <__vector_16>:
	else{transmit(distance);}
	
}

//overflow interrupt op timer 0
ISR(TIMER0_OVF_vect){
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	8f 93       	push	r24
 42a:	9f 93       	push	r25
 42c:	af 93       	push	r26
 42e:	bf 93       	push	r27
	countTimer0 += 255;
 430:	80 91 06 01 	lds	r24, 0x0106
 434:	90 91 07 01 	lds	r25, 0x0107
 438:	a0 91 08 01 	lds	r26, 0x0108
 43c:	b0 91 09 01 	lds	r27, 0x0109
 440:	81 50       	subi	r24, 0x01	; 1
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	af 4f       	sbci	r26, 0xFF	; 255
 446:	bf 4f       	sbci	r27, 0xFF	; 255
 448:	80 93 06 01 	sts	0x0106, r24
 44c:	90 93 07 01 	sts	0x0107, r25
 450:	a0 93 08 01 	sts	0x0108, r26
 454:	b0 93 09 01 	sts	0x0109, r27
}
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <__vector_3>:
//Interrupt voor PCINT0 ECHO PIN(pinb0)
ISR (PCINT0_vect){
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
 47a:	af 93       	push	r26
 47c:	bf 93       	push	r27
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
	//als echo pin aan gaat de timer starten
	if (PINB != 0x00){
 482:	83 b1       	in	r24, 0x03	; 3
 484:	88 23       	and	r24, r24
 486:	59 f0       	breq	.+22     	; 0x49e <__vector_3+0x34>

		PORTD = 0xff;
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	8b b9       	out	0x0b, r24	; 11
		TCCR0B |= (1<<CS00);
 48c:	85 b5       	in	r24, 0x25	; 37
 48e:	81 60       	ori	r24, 0x01	; 1
 490:	85 bd       	out	0x25, r24	; 37
		TIMSK0 |= 1<<TOIE0;
 492:	ee e6       	ldi	r30, 0x6E	; 110
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	81 60       	ori	r24, 0x01	; 1
 49a:	80 83       	st	Z, r24
 49c:	1d c0       	rjmp	.+58     	; 0x4d8 <__vector_3+0x6e>

	}//als echo pin uit gaat de timer stoppen en waarden aan countTimer0 meegeven
	else{
		PORTD = 0x00;
 49e:	1b b8       	out	0x0b, r1	; 11
		TCCR0B &= ~(1<<CS00);
 4a0:	85 b5       	in	r24, 0x25	; 37
 4a2:	8e 7f       	andi	r24, 0xFE	; 254
 4a4:	85 bd       	out	0x25, r24	; 37
		countTimer0 += TCNT0;
 4a6:	26 b5       	in	r18, 0x26	; 38
 4a8:	80 91 06 01 	lds	r24, 0x0106
 4ac:	90 91 07 01 	lds	r25, 0x0107
 4b0:	a0 91 08 01 	lds	r26, 0x0108
 4b4:	b0 91 09 01 	lds	r27, 0x0109
 4b8:	82 0f       	add	r24, r18
 4ba:	91 1d       	adc	r25, r1
 4bc:	a1 1d       	adc	r26, r1
 4be:	b1 1d       	adc	r27, r1
 4c0:	80 93 06 01 	sts	0x0106, r24
 4c4:	90 93 07 01 	sts	0x0107, r25
 4c8:	a0 93 08 01 	sts	0x0108, r26
 4cc:	b0 93 09 01 	sts	0x0109, r27
		TCNT0 = 0;
 4d0:	16 bc       	out	0x26, r1	; 38
		//echoDone flag op 1 zetten zodat ermee kan worden gerekend
		echoDone = 1;
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	80 93 0a 01 	sts	0x010A, r24

	}
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	2f 91       	pop	r18
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <main>:
}
*/
int main() {

	//Poort init
	DDRB = 0xfe;
 4f0:	8e ef       	ldi	r24, 0xFE	; 254
 4f2:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff;
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	8a b9       	out	0x0a, r24	; 10

	//PCINT0 init
	PCICR |= (1 << PCIE0);
 4f8:	e8 e6       	ldi	r30, 0x68	; 104
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	81 60       	ori	r24, 0x01	; 1
 500:	80 83       	st	Z, r24
	PCMSK0 |= (1<< PCINT0);
 502:	eb e6       	ldi	r30, 0x6B	; 107
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	81 60       	ori	r24, 0x01	; 1
 50a:	80 83       	st	Z, r24

	uart_init();//init serialisering
 50c:	0e 94 36 01 	call	0x26c	; 0x26c <uart_init>

	//scheduler
	SCH_Init_T1();
 510:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	SCH_Add_Task(readTemp,0,300);
 514:	8c ee       	ldi	r24, 0xEC	; 236
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	4c e2       	ldi	r20, 0x2C	; 44
 51e:	51 e0       	ldi	r21, 0x01	; 1
 520:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(readLDR,100,300);
 524:	80 ee       	ldi	r24, 0xE0	; 224
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	64 e6       	ldi	r22, 0x64	; 100
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	4c e2       	ldi	r20, 0x2C	; 44
 52e:	51 e0       	ldi	r21, 0x01	; 1
 530:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(SR04Signal,0,50);
 534:	8c e4       	ldi	r24, 0x4C	; 76
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	42 e3       	ldi	r20, 0x32	; 50
 53e:	50 e0       	ldi	r21, 0x00	; 0
 540:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 544:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>

	//run scheduler
	while(1) {
		SCH_Dispatch_Tasks();
 548:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
 54c:	fd cf       	rjmp	.-6      	; 0x548 <main+0x58>

0000054e <__subsf3>:
 54e:	50 58       	subi	r21, 0x80	; 128

00000550 <__addsf3>:
 550:	bb 27       	eor	r27, r27
 552:	aa 27       	eor	r26, r26
 554:	0e d0       	rcall	.+28     	; 0x572 <__addsf3x>
 556:	70 c1       	rjmp	.+736    	; 0x838 <__fp_round>
 558:	61 d1       	rcall	.+706    	; 0x81c <__fp_pscA>
 55a:	30 f0       	brcs	.+12     	; 0x568 <__addsf3+0x18>
 55c:	66 d1       	rcall	.+716    	; 0x82a <__fp_pscB>
 55e:	20 f0       	brcs	.+8      	; 0x568 <__addsf3+0x18>
 560:	31 f4       	brne	.+12     	; 0x56e <__addsf3+0x1e>
 562:	9f 3f       	cpi	r25, 0xFF	; 255
 564:	11 f4       	brne	.+4      	; 0x56a <__addsf3+0x1a>
 566:	1e f4       	brtc	.+6      	; 0x56e <__addsf3+0x1e>
 568:	56 c1       	rjmp	.+684    	; 0x816 <__fp_nan>
 56a:	0e f4       	brtc	.+2      	; 0x56e <__addsf3+0x1e>
 56c:	e0 95       	com	r30
 56e:	e7 fb       	bst	r30, 7
 570:	4c c1       	rjmp	.+664    	; 0x80a <__fp_inf>

00000572 <__addsf3x>:
 572:	e9 2f       	mov	r30, r25
 574:	72 d1       	rcall	.+740    	; 0x85a <__fp_split3>
 576:	80 f3       	brcs	.-32     	; 0x558 <__addsf3+0x8>
 578:	ba 17       	cp	r27, r26
 57a:	62 07       	cpc	r22, r18
 57c:	73 07       	cpc	r23, r19
 57e:	84 07       	cpc	r24, r20
 580:	95 07       	cpc	r25, r21
 582:	18 f0       	brcs	.+6      	; 0x58a <__addsf3x+0x18>
 584:	71 f4       	brne	.+28     	; 0x5a2 <__addsf3x+0x30>
 586:	9e f5       	brtc	.+102    	; 0x5ee <__addsf3x+0x7c>
 588:	8a c1       	rjmp	.+788    	; 0x89e <__fp_zero>
 58a:	0e f4       	brtc	.+2      	; 0x58e <__addsf3x+0x1c>
 58c:	e0 95       	com	r30
 58e:	0b 2e       	mov	r0, r27
 590:	ba 2f       	mov	r27, r26
 592:	a0 2d       	mov	r26, r0
 594:	0b 01       	movw	r0, r22
 596:	b9 01       	movw	r22, r18
 598:	90 01       	movw	r18, r0
 59a:	0c 01       	movw	r0, r24
 59c:	ca 01       	movw	r24, r20
 59e:	a0 01       	movw	r20, r0
 5a0:	11 24       	eor	r1, r1
 5a2:	ff 27       	eor	r31, r31
 5a4:	59 1b       	sub	r21, r25
 5a6:	99 f0       	breq	.+38     	; 0x5ce <__addsf3x+0x5c>
 5a8:	59 3f       	cpi	r21, 0xF9	; 249
 5aa:	50 f4       	brcc	.+20     	; 0x5c0 <__addsf3x+0x4e>
 5ac:	50 3e       	cpi	r21, 0xE0	; 224
 5ae:	68 f1       	brcs	.+90     	; 0x60a <__addsf3x+0x98>
 5b0:	1a 16       	cp	r1, r26
 5b2:	f0 40       	sbci	r31, 0x00	; 0
 5b4:	a2 2f       	mov	r26, r18
 5b6:	23 2f       	mov	r18, r19
 5b8:	34 2f       	mov	r19, r20
 5ba:	44 27       	eor	r20, r20
 5bc:	58 5f       	subi	r21, 0xF8	; 248
 5be:	f3 cf       	rjmp	.-26     	; 0x5a6 <__addsf3x+0x34>
 5c0:	46 95       	lsr	r20
 5c2:	37 95       	ror	r19
 5c4:	27 95       	ror	r18
 5c6:	a7 95       	ror	r26
 5c8:	f0 40       	sbci	r31, 0x00	; 0
 5ca:	53 95       	inc	r21
 5cc:	c9 f7       	brne	.-14     	; 0x5c0 <__addsf3x+0x4e>
 5ce:	7e f4       	brtc	.+30     	; 0x5ee <__addsf3x+0x7c>
 5d0:	1f 16       	cp	r1, r31
 5d2:	ba 0b       	sbc	r27, r26
 5d4:	62 0b       	sbc	r22, r18
 5d6:	73 0b       	sbc	r23, r19
 5d8:	84 0b       	sbc	r24, r20
 5da:	ba f0       	brmi	.+46     	; 0x60a <__addsf3x+0x98>
 5dc:	91 50       	subi	r25, 0x01	; 1
 5de:	a1 f0       	breq	.+40     	; 0x608 <__addsf3x+0x96>
 5e0:	ff 0f       	add	r31, r31
 5e2:	bb 1f       	adc	r27, r27
 5e4:	66 1f       	adc	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	88 1f       	adc	r24, r24
 5ea:	c2 f7       	brpl	.-16     	; 0x5dc <__addsf3x+0x6a>
 5ec:	0e c0       	rjmp	.+28     	; 0x60a <__addsf3x+0x98>
 5ee:	ba 0f       	add	r27, r26
 5f0:	62 1f       	adc	r22, r18
 5f2:	73 1f       	adc	r23, r19
 5f4:	84 1f       	adc	r24, r20
 5f6:	48 f4       	brcc	.+18     	; 0x60a <__addsf3x+0x98>
 5f8:	87 95       	ror	r24
 5fa:	77 95       	ror	r23
 5fc:	67 95       	ror	r22
 5fe:	b7 95       	ror	r27
 600:	f7 95       	ror	r31
 602:	9e 3f       	cpi	r25, 0xFE	; 254
 604:	08 f0       	brcs	.+2      	; 0x608 <__addsf3x+0x96>
 606:	b3 cf       	rjmp	.-154    	; 0x56e <__addsf3+0x1e>
 608:	93 95       	inc	r25
 60a:	88 0f       	add	r24, r24
 60c:	08 f0       	brcs	.+2      	; 0x610 <__addsf3x+0x9e>
 60e:	99 27       	eor	r25, r25
 610:	ee 0f       	add	r30, r30
 612:	97 95       	ror	r25
 614:	87 95       	ror	r24
 616:	08 95       	ret

00000618 <__cmpsf2>:
 618:	d4 d0       	rcall	.+424    	; 0x7c2 <__fp_cmp>
 61a:	08 f4       	brcc	.+2      	; 0x61e <__cmpsf2+0x6>
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	08 95       	ret

00000620 <__divsf3>:
 620:	0c d0       	rcall	.+24     	; 0x63a <__divsf3x>
 622:	0a c1       	rjmp	.+532    	; 0x838 <__fp_round>
 624:	02 d1       	rcall	.+516    	; 0x82a <__fp_pscB>
 626:	40 f0       	brcs	.+16     	; 0x638 <__divsf3+0x18>
 628:	f9 d0       	rcall	.+498    	; 0x81c <__fp_pscA>
 62a:	30 f0       	brcs	.+12     	; 0x638 <__divsf3+0x18>
 62c:	21 f4       	brne	.+8      	; 0x636 <__divsf3+0x16>
 62e:	5f 3f       	cpi	r21, 0xFF	; 255
 630:	19 f0       	breq	.+6      	; 0x638 <__divsf3+0x18>
 632:	eb c0       	rjmp	.+470    	; 0x80a <__fp_inf>
 634:	51 11       	cpse	r21, r1
 636:	34 c1       	rjmp	.+616    	; 0x8a0 <__fp_szero>
 638:	ee c0       	rjmp	.+476    	; 0x816 <__fp_nan>

0000063a <__divsf3x>:
 63a:	0f d1       	rcall	.+542    	; 0x85a <__fp_split3>
 63c:	98 f3       	brcs	.-26     	; 0x624 <__divsf3+0x4>

0000063e <__divsf3_pse>:
 63e:	99 23       	and	r25, r25
 640:	c9 f3       	breq	.-14     	; 0x634 <__divsf3+0x14>
 642:	55 23       	and	r21, r21
 644:	b1 f3       	breq	.-20     	; 0x632 <__divsf3+0x12>
 646:	95 1b       	sub	r25, r21
 648:	55 0b       	sbc	r21, r21
 64a:	bb 27       	eor	r27, r27
 64c:	aa 27       	eor	r26, r26
 64e:	62 17       	cp	r22, r18
 650:	73 07       	cpc	r23, r19
 652:	84 07       	cpc	r24, r20
 654:	38 f0       	brcs	.+14     	; 0x664 <__divsf3_pse+0x26>
 656:	9f 5f       	subi	r25, 0xFF	; 255
 658:	5f 4f       	sbci	r21, 0xFF	; 255
 65a:	22 0f       	add	r18, r18
 65c:	33 1f       	adc	r19, r19
 65e:	44 1f       	adc	r20, r20
 660:	aa 1f       	adc	r26, r26
 662:	a9 f3       	breq	.-22     	; 0x64e <__divsf3_pse+0x10>
 664:	33 d0       	rcall	.+102    	; 0x6cc <__divsf3_pse+0x8e>
 666:	0e 2e       	mov	r0, r30
 668:	3a f0       	brmi	.+14     	; 0x678 <__divsf3_pse+0x3a>
 66a:	e0 e8       	ldi	r30, 0x80	; 128
 66c:	30 d0       	rcall	.+96     	; 0x6ce <__divsf3_pse+0x90>
 66e:	91 50       	subi	r25, 0x01	; 1
 670:	50 40       	sbci	r21, 0x00	; 0
 672:	e6 95       	lsr	r30
 674:	00 1c       	adc	r0, r0
 676:	ca f7       	brpl	.-14     	; 0x66a <__divsf3_pse+0x2c>
 678:	29 d0       	rcall	.+82     	; 0x6cc <__divsf3_pse+0x8e>
 67a:	fe 2f       	mov	r31, r30
 67c:	27 d0       	rcall	.+78     	; 0x6cc <__divsf3_pse+0x8e>
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	bb 1f       	adc	r27, r27
 686:	26 17       	cp	r18, r22
 688:	37 07       	cpc	r19, r23
 68a:	48 07       	cpc	r20, r24
 68c:	ab 07       	cpc	r26, r27
 68e:	b0 e8       	ldi	r27, 0x80	; 128
 690:	09 f0       	breq	.+2      	; 0x694 <__divsf3_pse+0x56>
 692:	bb 0b       	sbc	r27, r27
 694:	80 2d       	mov	r24, r0
 696:	bf 01       	movw	r22, r30
 698:	ff 27       	eor	r31, r31
 69a:	93 58       	subi	r25, 0x83	; 131
 69c:	5f 4f       	sbci	r21, 0xFF	; 255
 69e:	2a f0       	brmi	.+10     	; 0x6aa <__divsf3_pse+0x6c>
 6a0:	9e 3f       	cpi	r25, 0xFE	; 254
 6a2:	51 05       	cpc	r21, r1
 6a4:	68 f0       	brcs	.+26     	; 0x6c0 <__divsf3_pse+0x82>
 6a6:	b1 c0       	rjmp	.+354    	; 0x80a <__fp_inf>
 6a8:	fb c0       	rjmp	.+502    	; 0x8a0 <__fp_szero>
 6aa:	5f 3f       	cpi	r21, 0xFF	; 255
 6ac:	ec f3       	brlt	.-6      	; 0x6a8 <__divsf3_pse+0x6a>
 6ae:	98 3e       	cpi	r25, 0xE8	; 232
 6b0:	dc f3       	brlt	.-10     	; 0x6a8 <__divsf3_pse+0x6a>
 6b2:	86 95       	lsr	r24
 6b4:	77 95       	ror	r23
 6b6:	67 95       	ror	r22
 6b8:	b7 95       	ror	r27
 6ba:	f7 95       	ror	r31
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	c9 f7       	brne	.-14     	; 0x6b2 <__divsf3_pse+0x74>
 6c0:	88 0f       	add	r24, r24
 6c2:	91 1d       	adc	r25, r1
 6c4:	96 95       	lsr	r25
 6c6:	87 95       	ror	r24
 6c8:	97 f9       	bld	r25, 7
 6ca:	08 95       	ret
 6cc:	e1 e0       	ldi	r30, 0x01	; 1
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	bb 1f       	adc	r27, r27
 6d6:	62 17       	cp	r22, r18
 6d8:	73 07       	cpc	r23, r19
 6da:	84 07       	cpc	r24, r20
 6dc:	ba 07       	cpc	r27, r26
 6de:	20 f0       	brcs	.+8      	; 0x6e8 <__divsf3_pse+0xaa>
 6e0:	62 1b       	sub	r22, r18
 6e2:	73 0b       	sbc	r23, r19
 6e4:	84 0b       	sbc	r24, r20
 6e6:	ba 0b       	sbc	r27, r26
 6e8:	ee 1f       	adc	r30, r30
 6ea:	88 f7       	brcc	.-30     	; 0x6ce <__divsf3_pse+0x90>
 6ec:	e0 95       	com	r30
 6ee:	08 95       	ret

000006f0 <__fixunssfsi>:
 6f0:	bc d0       	rcall	.+376    	; 0x86a <__fp_splitA>
 6f2:	88 f0       	brcs	.+34     	; 0x716 <__fixunssfsi+0x26>
 6f4:	9f 57       	subi	r25, 0x7F	; 127
 6f6:	90 f0       	brcs	.+36     	; 0x71c <__fixunssfsi+0x2c>
 6f8:	b9 2f       	mov	r27, r25
 6fa:	99 27       	eor	r25, r25
 6fc:	b7 51       	subi	r27, 0x17	; 23
 6fe:	a0 f0       	brcs	.+40     	; 0x728 <__fixunssfsi+0x38>
 700:	d1 f0       	breq	.+52     	; 0x736 <__fixunssfsi+0x46>
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	88 1f       	adc	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	1a f0       	brmi	.+6      	; 0x712 <__fixunssfsi+0x22>
 70c:	ba 95       	dec	r27
 70e:	c9 f7       	brne	.-14     	; 0x702 <__fixunssfsi+0x12>
 710:	12 c0       	rjmp	.+36     	; 0x736 <__fixunssfsi+0x46>
 712:	b1 30       	cpi	r27, 0x01	; 1
 714:	81 f0       	breq	.+32     	; 0x736 <__fixunssfsi+0x46>
 716:	c3 d0       	rcall	.+390    	; 0x89e <__fp_zero>
 718:	b1 e0       	ldi	r27, 0x01	; 1
 71a:	08 95       	ret
 71c:	c0 c0       	rjmp	.+384    	; 0x89e <__fp_zero>
 71e:	67 2f       	mov	r22, r23
 720:	78 2f       	mov	r23, r24
 722:	88 27       	eor	r24, r24
 724:	b8 5f       	subi	r27, 0xF8	; 248
 726:	39 f0       	breq	.+14     	; 0x736 <__fixunssfsi+0x46>
 728:	b9 3f       	cpi	r27, 0xF9	; 249
 72a:	cc f3       	brlt	.-14     	; 0x71e <__fixunssfsi+0x2e>
 72c:	86 95       	lsr	r24
 72e:	77 95       	ror	r23
 730:	67 95       	ror	r22
 732:	b3 95       	inc	r27
 734:	d9 f7       	brne	.-10     	; 0x72c <__fixunssfsi+0x3c>
 736:	3e f4       	brtc	.+14     	; 0x746 <__fixunssfsi+0x56>
 738:	90 95       	com	r25
 73a:	80 95       	com	r24
 73c:	70 95       	com	r23
 73e:	61 95       	neg	r22
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	8f 4f       	sbci	r24, 0xFF	; 255
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	08 95       	ret

00000748 <__floatunsisf>:
 748:	e8 94       	clt
 74a:	09 c0       	rjmp	.+18     	; 0x75e <__floatsisf+0x12>

0000074c <__floatsisf>:
 74c:	97 fb       	bst	r25, 7
 74e:	3e f4       	brtc	.+14     	; 0x75e <__floatsisf+0x12>
 750:	90 95       	com	r25
 752:	80 95       	com	r24
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	99 23       	and	r25, r25
 760:	a9 f0       	breq	.+42     	; 0x78c <__floatsisf+0x40>
 762:	f9 2f       	mov	r31, r25
 764:	96 e9       	ldi	r25, 0x96	; 150
 766:	bb 27       	eor	r27, r27
 768:	93 95       	inc	r25
 76a:	f6 95       	lsr	r31
 76c:	87 95       	ror	r24
 76e:	77 95       	ror	r23
 770:	67 95       	ror	r22
 772:	b7 95       	ror	r27
 774:	f1 11       	cpse	r31, r1
 776:	f8 cf       	rjmp	.-16     	; 0x768 <__floatsisf+0x1c>
 778:	fa f4       	brpl	.+62     	; 0x7b8 <__floatsisf+0x6c>
 77a:	bb 0f       	add	r27, r27
 77c:	11 f4       	brne	.+4      	; 0x782 <__floatsisf+0x36>
 77e:	60 ff       	sbrs	r22, 0
 780:	1b c0       	rjmp	.+54     	; 0x7b8 <__floatsisf+0x6c>
 782:	6f 5f       	subi	r22, 0xFF	; 255
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	16 c0       	rjmp	.+44     	; 0x7b8 <__floatsisf+0x6c>
 78c:	88 23       	and	r24, r24
 78e:	11 f0       	breq	.+4      	; 0x794 <__floatsisf+0x48>
 790:	96 e9       	ldi	r25, 0x96	; 150
 792:	11 c0       	rjmp	.+34     	; 0x7b6 <__floatsisf+0x6a>
 794:	77 23       	and	r23, r23
 796:	21 f0       	breq	.+8      	; 0x7a0 <__floatsisf+0x54>
 798:	9e e8       	ldi	r25, 0x8E	; 142
 79a:	87 2f       	mov	r24, r23
 79c:	76 2f       	mov	r23, r22
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <__floatsisf+0x5e>
 7a0:	66 23       	and	r22, r22
 7a2:	71 f0       	breq	.+28     	; 0x7c0 <__floatsisf+0x74>
 7a4:	96 e8       	ldi	r25, 0x86	; 134
 7a6:	86 2f       	mov	r24, r22
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	2a f0       	brmi	.+10     	; 0x7b8 <__floatsisf+0x6c>
 7ae:	9a 95       	dec	r25
 7b0:	66 0f       	add	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	88 1f       	adc	r24, r24
 7b6:	da f7       	brpl	.-10     	; 0x7ae <__floatsisf+0x62>
 7b8:	88 0f       	add	r24, r24
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret

000007c2 <__fp_cmp>:
 7c2:	99 0f       	add	r25, r25
 7c4:	00 08       	sbc	r0, r0
 7c6:	55 0f       	add	r21, r21
 7c8:	aa 0b       	sbc	r26, r26
 7ca:	e0 e8       	ldi	r30, 0x80	; 128
 7cc:	fe ef       	ldi	r31, 0xFE	; 254
 7ce:	16 16       	cp	r1, r22
 7d0:	17 06       	cpc	r1, r23
 7d2:	e8 07       	cpc	r30, r24
 7d4:	f9 07       	cpc	r31, r25
 7d6:	c0 f0       	brcs	.+48     	; 0x808 <__fp_cmp+0x46>
 7d8:	12 16       	cp	r1, r18
 7da:	13 06       	cpc	r1, r19
 7dc:	e4 07       	cpc	r30, r20
 7de:	f5 07       	cpc	r31, r21
 7e0:	98 f0       	brcs	.+38     	; 0x808 <__fp_cmp+0x46>
 7e2:	62 1b       	sub	r22, r18
 7e4:	73 0b       	sbc	r23, r19
 7e6:	84 0b       	sbc	r24, r20
 7e8:	95 0b       	sbc	r25, r21
 7ea:	39 f4       	brne	.+14     	; 0x7fa <__fp_cmp+0x38>
 7ec:	0a 26       	eor	r0, r26
 7ee:	61 f0       	breq	.+24     	; 0x808 <__fp_cmp+0x46>
 7f0:	23 2b       	or	r18, r19
 7f2:	24 2b       	or	r18, r20
 7f4:	25 2b       	or	r18, r21
 7f6:	21 f4       	brne	.+8      	; 0x800 <__fp_cmp+0x3e>
 7f8:	08 95       	ret
 7fa:	0a 26       	eor	r0, r26
 7fc:	09 f4       	brne	.+2      	; 0x800 <__fp_cmp+0x3e>
 7fe:	a1 40       	sbci	r26, 0x01	; 1
 800:	a6 95       	lsr	r26
 802:	8f ef       	ldi	r24, 0xFF	; 255
 804:	81 1d       	adc	r24, r1
 806:	81 1d       	adc	r24, r1
 808:	08 95       	ret

0000080a <__fp_inf>:
 80a:	97 f9       	bld	r25, 7
 80c:	9f 67       	ori	r25, 0x7F	; 127
 80e:	80 e8       	ldi	r24, 0x80	; 128
 810:	70 e0       	ldi	r23, 0x00	; 0
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	08 95       	ret

00000816 <__fp_nan>:
 816:	9f ef       	ldi	r25, 0xFF	; 255
 818:	80 ec       	ldi	r24, 0xC0	; 192
 81a:	08 95       	ret

0000081c <__fp_pscA>:
 81c:	00 24       	eor	r0, r0
 81e:	0a 94       	dec	r0
 820:	16 16       	cp	r1, r22
 822:	17 06       	cpc	r1, r23
 824:	18 06       	cpc	r1, r24
 826:	09 06       	cpc	r0, r25
 828:	08 95       	ret

0000082a <__fp_pscB>:
 82a:	00 24       	eor	r0, r0
 82c:	0a 94       	dec	r0
 82e:	12 16       	cp	r1, r18
 830:	13 06       	cpc	r1, r19
 832:	14 06       	cpc	r1, r20
 834:	05 06       	cpc	r0, r21
 836:	08 95       	ret

00000838 <__fp_round>:
 838:	09 2e       	mov	r0, r25
 83a:	03 94       	inc	r0
 83c:	00 0c       	add	r0, r0
 83e:	11 f4       	brne	.+4      	; 0x844 <__fp_round+0xc>
 840:	88 23       	and	r24, r24
 842:	52 f0       	brmi	.+20     	; 0x858 <__fp_round+0x20>
 844:	bb 0f       	add	r27, r27
 846:	40 f4       	brcc	.+16     	; 0x858 <__fp_round+0x20>
 848:	bf 2b       	or	r27, r31
 84a:	11 f4       	brne	.+4      	; 0x850 <__fp_round+0x18>
 84c:	60 ff       	sbrs	r22, 0
 84e:	04 c0       	rjmp	.+8      	; 0x858 <__fp_round+0x20>
 850:	6f 5f       	subi	r22, 0xFF	; 255
 852:	7f 4f       	sbci	r23, 0xFF	; 255
 854:	8f 4f       	sbci	r24, 0xFF	; 255
 856:	9f 4f       	sbci	r25, 0xFF	; 255
 858:	08 95       	ret

0000085a <__fp_split3>:
 85a:	57 fd       	sbrc	r21, 7
 85c:	90 58       	subi	r25, 0x80	; 128
 85e:	44 0f       	add	r20, r20
 860:	55 1f       	adc	r21, r21
 862:	59 f0       	breq	.+22     	; 0x87a <__fp_splitA+0x10>
 864:	5f 3f       	cpi	r21, 0xFF	; 255
 866:	71 f0       	breq	.+28     	; 0x884 <__fp_splitA+0x1a>
 868:	47 95       	ror	r20

0000086a <__fp_splitA>:
 86a:	88 0f       	add	r24, r24
 86c:	97 fb       	bst	r25, 7
 86e:	99 1f       	adc	r25, r25
 870:	61 f0       	breq	.+24     	; 0x88a <__fp_splitA+0x20>
 872:	9f 3f       	cpi	r25, 0xFF	; 255
 874:	79 f0       	breq	.+30     	; 0x894 <__fp_splitA+0x2a>
 876:	87 95       	ror	r24
 878:	08 95       	ret
 87a:	12 16       	cp	r1, r18
 87c:	13 06       	cpc	r1, r19
 87e:	14 06       	cpc	r1, r20
 880:	55 1f       	adc	r21, r21
 882:	f2 cf       	rjmp	.-28     	; 0x868 <__fp_split3+0xe>
 884:	46 95       	lsr	r20
 886:	f1 df       	rcall	.-30     	; 0x86a <__fp_splitA>
 888:	08 c0       	rjmp	.+16     	; 0x89a <__fp_splitA+0x30>
 88a:	16 16       	cp	r1, r22
 88c:	17 06       	cpc	r1, r23
 88e:	18 06       	cpc	r1, r24
 890:	99 1f       	adc	r25, r25
 892:	f1 cf       	rjmp	.-30     	; 0x876 <__fp_splitA+0xc>
 894:	86 95       	lsr	r24
 896:	71 05       	cpc	r23, r1
 898:	61 05       	cpc	r22, r1
 89a:	08 94       	sec
 89c:	08 95       	ret

0000089e <__fp_zero>:
 89e:	e8 94       	clt

000008a0 <__fp_szero>:
 8a0:	bb 27       	eor	r27, r27
 8a2:	66 27       	eor	r22, r22
 8a4:	77 27       	eor	r23, r23
 8a6:	cb 01       	movw	r24, r22
 8a8:	97 f9       	bld	r25, 7
 8aa:	08 95       	ret

000008ac <__gesf2>:
 8ac:	8a df       	rcall	.-236    	; 0x7c2 <__fp_cmp>
 8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__gesf2+0x6>
 8b0:	8f ef       	ldi	r24, 0xFF	; 255
 8b2:	08 95       	ret

000008b4 <__mulsf3>:
 8b4:	0b d0       	rcall	.+22     	; 0x8cc <__mulsf3x>
 8b6:	c0 cf       	rjmp	.-128    	; 0x838 <__fp_round>
 8b8:	b1 df       	rcall	.-158    	; 0x81c <__fp_pscA>
 8ba:	28 f0       	brcs	.+10     	; 0x8c6 <__mulsf3+0x12>
 8bc:	b6 df       	rcall	.-148    	; 0x82a <__fp_pscB>
 8be:	18 f0       	brcs	.+6      	; 0x8c6 <__mulsf3+0x12>
 8c0:	95 23       	and	r25, r21
 8c2:	09 f0       	breq	.+2      	; 0x8c6 <__mulsf3+0x12>
 8c4:	a2 cf       	rjmp	.-188    	; 0x80a <__fp_inf>
 8c6:	a7 cf       	rjmp	.-178    	; 0x816 <__fp_nan>
 8c8:	11 24       	eor	r1, r1
 8ca:	ea cf       	rjmp	.-44     	; 0x8a0 <__fp_szero>

000008cc <__mulsf3x>:
 8cc:	c6 df       	rcall	.-116    	; 0x85a <__fp_split3>
 8ce:	a0 f3       	brcs	.-24     	; 0x8b8 <__mulsf3+0x4>

000008d0 <__mulsf3_pse>:
 8d0:	95 9f       	mul	r25, r21
 8d2:	d1 f3       	breq	.-12     	; 0x8c8 <__mulsf3+0x14>
 8d4:	95 0f       	add	r25, r21
 8d6:	50 e0       	ldi	r21, 0x00	; 0
 8d8:	55 1f       	adc	r21, r21
 8da:	62 9f       	mul	r22, r18
 8dc:	f0 01       	movw	r30, r0
 8de:	72 9f       	mul	r23, r18
 8e0:	bb 27       	eor	r27, r27
 8e2:	f0 0d       	add	r31, r0
 8e4:	b1 1d       	adc	r27, r1
 8e6:	63 9f       	mul	r22, r19
 8e8:	aa 27       	eor	r26, r26
 8ea:	f0 0d       	add	r31, r0
 8ec:	b1 1d       	adc	r27, r1
 8ee:	aa 1f       	adc	r26, r26
 8f0:	64 9f       	mul	r22, r20
 8f2:	66 27       	eor	r22, r22
 8f4:	b0 0d       	add	r27, r0
 8f6:	a1 1d       	adc	r26, r1
 8f8:	66 1f       	adc	r22, r22
 8fa:	82 9f       	mul	r24, r18
 8fc:	22 27       	eor	r18, r18
 8fe:	b0 0d       	add	r27, r0
 900:	a1 1d       	adc	r26, r1
 902:	62 1f       	adc	r22, r18
 904:	73 9f       	mul	r23, r19
 906:	b0 0d       	add	r27, r0
 908:	a1 1d       	adc	r26, r1
 90a:	62 1f       	adc	r22, r18
 90c:	83 9f       	mul	r24, r19
 90e:	a0 0d       	add	r26, r0
 910:	61 1d       	adc	r22, r1
 912:	22 1f       	adc	r18, r18
 914:	74 9f       	mul	r23, r20
 916:	33 27       	eor	r19, r19
 918:	a0 0d       	add	r26, r0
 91a:	61 1d       	adc	r22, r1
 91c:	23 1f       	adc	r18, r19
 91e:	84 9f       	mul	r24, r20
 920:	60 0d       	add	r22, r0
 922:	21 1d       	adc	r18, r1
 924:	82 2f       	mov	r24, r18
 926:	76 2f       	mov	r23, r22
 928:	6a 2f       	mov	r22, r26
 92a:	11 24       	eor	r1, r1
 92c:	9f 57       	subi	r25, 0x7F	; 127
 92e:	50 40       	sbci	r21, 0x00	; 0
 930:	8a f0       	brmi	.+34     	; 0x954 <__stack+0x55>
 932:	e1 f0       	breq	.+56     	; 0x96c <__stack+0x6d>
 934:	88 23       	and	r24, r24
 936:	4a f0       	brmi	.+18     	; 0x94a <__stack+0x4b>
 938:	ee 0f       	add	r30, r30
 93a:	ff 1f       	adc	r31, r31
 93c:	bb 1f       	adc	r27, r27
 93e:	66 1f       	adc	r22, r22
 940:	77 1f       	adc	r23, r23
 942:	88 1f       	adc	r24, r24
 944:	91 50       	subi	r25, 0x01	; 1
 946:	50 40       	sbci	r21, 0x00	; 0
 948:	a9 f7       	brne	.-22     	; 0x934 <__stack+0x35>
 94a:	9e 3f       	cpi	r25, 0xFE	; 254
 94c:	51 05       	cpc	r21, r1
 94e:	70 f0       	brcs	.+28     	; 0x96c <__stack+0x6d>
 950:	5c cf       	rjmp	.-328    	; 0x80a <__fp_inf>
 952:	a6 cf       	rjmp	.-180    	; 0x8a0 <__fp_szero>
 954:	5f 3f       	cpi	r21, 0xFF	; 255
 956:	ec f3       	brlt	.-6      	; 0x952 <__stack+0x53>
 958:	98 3e       	cpi	r25, 0xE8	; 232
 95a:	dc f3       	brlt	.-10     	; 0x952 <__stack+0x53>
 95c:	86 95       	lsr	r24
 95e:	77 95       	ror	r23
 960:	67 95       	ror	r22
 962:	b7 95       	ror	r27
 964:	f7 95       	ror	r31
 966:	e7 95       	ror	r30
 968:	9f 5f       	subi	r25, 0xFF	; 255
 96a:	c1 f7       	brne	.-16     	; 0x95c <__stack+0x5d>
 96c:	fe 2b       	or	r31, r30
 96e:	88 0f       	add	r24, r24
 970:	91 1d       	adc	r25, r1
 972:	96 95       	lsr	r25
 974:	87 95       	ror	r24
 976:	97 f9       	bld	r25, 7
 978:	08 95       	ret

0000097a <_exit>:
 97a:	f8 94       	cli

0000097c <__stop_program>:
 97c:	ff cf       	rjmp	.-2      	; 0x97c <__stop_program>
