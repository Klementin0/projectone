
Censoren.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000008ca  0000095e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800100  00800100  0000095e  2**0
                  ALLOC
  3 .stab         00002100  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000646  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000030a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083f  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000368  00000000  00000000  00003987  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004eb  00000000  00000000  00003cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000041dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fa  00000000  00000000  000043d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047b  00000000  00000000  000046ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4a 02 	call	0x494	; 0x494 <main>
  9e:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
  b0:	eb 01       	movw	r28, r22
  b2:	da 01       	movw	r26, r20
  b4:	80 91 05 01 	lds	r24, 0x0105
  b8:	90 91 06 01 	lds	r25, 0x0106
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
  c0:	ec e0       	ldi	r30, 0x0C	; 12
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	42 2f       	mov	r20, r18
  ca:	b9 01       	movw	r22, r18
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <SCH_Add_Task+0x3e>
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	37 96       	adiw	r30, 0x07	; 7
  da:	26 30       	cpi	r18, 0x06	; 6
  dc:	31 05       	cpc	r19, r1
  de:	a1 f7       	brne	.-24     	; 0xc8 <SCH_Add_Task+0x22>
  e0:	84 2f       	mov	r24, r20
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SCH_Add_Task+0x40>
  e4:	82 2f       	mov	r24, r18
  e6:	85 30       	cpi	r24, 0x05	; 5
  e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x4c>
  ea:	17 c0       	rjmp	.+46     	; 0x11a <SCH_Add_Task+0x74>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	86 1b       	sub	r24, r22
 102:	97 0b       	sbc	r25, r23
 104:	fc 01       	movw	r30, r24
 106:	eb 5f       	subi	r30, 0xFB	; 251
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	11 83       	std	Z+1, r17	; 0x01
 10c:	00 83       	st	Z, r16
 10e:	d3 83       	std	Z+3, r29	; 0x03
 110:	c2 83       	std	Z+2, r28	; 0x02
 112:	b5 83       	std	Z+5, r27	; 0x05
 114:	a4 83       	std	Z+4, r26	; 0x04
 116:	16 82       	std	Z+6, r1	; 0x06
 118:	84 2f       	mov	r24, r20
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <SCH_Delete_Task>:
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 1b       	sub	r30, r24
 136:	f9 0b       	sbc	r31, r25
 138:	eb 5f       	subi	r30, 0xFB	; 251
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	10 82       	st	Z, r1
 140:	13 82       	std	Z+3, r1	; 0x03
 142:	12 82       	std	Z+2, r1	; 0x02
 144:	15 82       	std	Z+5, r1	; 0x05
 146:	14 82       	std	Z+4, r1	; 0x04
 148:	16 82       	std	Z+6, r1	; 0x06
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret

0000014e <SCH_Dispatch_Tasks>:
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	cb e0       	ldi	r28, 0x0B	; 11
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	0f 2e       	mov	r0, r31
 162:	fa ef       	ldi	r31, 0xFA	; 250
 164:	ef 2e       	mov	r14, r31
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	ff 2e       	mov	r15, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	ec 0e       	add	r14, r28
 16e:	fd 1e       	adc	r15, r29
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	91 f0       	breq	.+36     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 178:	d7 01       	movw	r26, r14
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	61 f0       	breq	.+24     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 184:	09 95       	icall
 186:	88 81       	ld	r24, Y
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	88 83       	st	Y, r24
 18c:	f7 01       	movw	r30, r14
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	19 f4       	brne	.+6      	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 196:	81 2f       	mov	r24, r17
 198:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	27 96       	adiw	r28, 0x07	; 7
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	15 30       	cpi	r17, 0x05	; 5
 1aa:	19 f7       	brne	.-58     	; 0x172 <SCH_Dispatch_Tasks+0x24>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <SCH_Init_T1>:
 1bc:	cf 93       	push	r28
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	c5 30       	cpi	r28, 0x05	; 5
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <SCH_Init_T1+0x4>
 1cc:	81 e7       	ldi	r24, 0x71	; 113
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	90 93 89 00 	sts	0x0089, r25
 1d4:	80 93 88 00 	sts	0x0088, r24
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	80 93 81 00 	sts	0x0081, r24
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 6f 00 	sts	0x006F, r24
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <SCH_Start>:
 1e8:	78 94       	sei
 1ea:	08 95       	ret

000001ec <__vector_11>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	e5 e0       	ldi	r30, 0x05	; 5
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	df 01       	movw	r26, r30
 210:	16 96       	adiw	r26, 0x06	; 6
 212:	9f 01       	movw	r18, r30
 214:	2d 5d       	subi	r18, 0xDD	; 221
 216:	3f 4f       	sbci	r19, 0xFF	; 255
 218:	80 81       	ld	r24, Z
 21a:	91 81       	ldd	r25, Z+1	; 0x01
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	91 f0       	breq	.+36     	; 0x244 <__vector_11+0x58>
 220:	82 81       	ldd	r24, Z+2	; 0x02
 222:	93 81       	ldd	r25, Z+3	; 0x03
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	59 f4       	brne	.+22     	; 0x23e <__vector_11+0x52>
 228:	8c 91       	ld	r24, X
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	8c 93       	st	X, r24
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	39 f0       	breq	.+14     	; 0x244 <__vector_11+0x58>
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	93 83       	std	Z+3, r25	; 0x03
 23a:	82 83       	std	Z+2, r24	; 0x02
 23c:	03 c0       	rjmp	.+6      	; 0x244 <__vector_11+0x58>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	93 83       	std	Z+3, r25	; 0x03
 242:	82 83       	std	Z+2, r24	; 0x02
 244:	37 96       	adiw	r30, 0x07	; 7
 246:	17 96       	adiw	r26, 0x07	; 7
 248:	e2 17       	cp	r30, r18
 24a:	f3 07       	cpc	r31, r19
 24c:	29 f7       	brne	.-54     	; 0x218 <__vector_11+0x2c>
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <uart_init>:


//serialisering
void uart_init() {
	// set the baud rate
	UBRR0H = 19200;
 26c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
 270:	83 e3       	ldi	r24, 0x33	; 51
 272:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
 276:	10 92 c0 00 	sts	0x00C0, r1
	// enable transmitter and receiver
	UCSR0B = _BV(TXEN0)|_BV(RXEN0);
 27a:	88 e1       	ldi	r24, 0x18	; 24
 27c:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	80 93 c2 00 	sts	0x00C2, r24
}
 286:	08 95       	ret

00000288 <transmit>:
//transmitten naar Realterm/Putty/Centrale
void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 288:	e0 ec       	ldi	r30, 0xC0	; 192
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	90 81       	ld	r25, Z
 28e:	95 ff       	sbrs	r25, 5
 290:	fd cf       	rjmp	.-6      	; 0x28c <transmit+0x4>
	// send the data
	UDR0 = data;
 292:	80 93 c6 00 	sts	0x00C6, r24
}
 296:	08 95       	ret

00000298 <SR04Signal>:
	
	float distance = 0.00;
	
	//echoDone is een boolean die checkt of de echo klaar is
	//Als de echo pas klaar is mag ermee worden gerekend
	echoDone = 0;
 298:	10 92 04 01 	sts	0x0104, r1
	
	//Timer0 counter wordt gereset
	countTimer0 = 0;
 29c:	10 92 00 01 	sts	0x0100, r1
 2a0:	10 92 01 01 	sts	0x0101, r1
 2a4:	10 92 02 01 	sts	0x0102, r1
 2a8:	10 92 03 01 	sts	0x0103, r1
	
	
	//pulse sturen naar de trigger
	PORTB = 0x00;
 2ac:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ae:	8f e3       	ldi	r24, 0x3F	; 63
 2b0:	9f e1       	ldi	r25, 0x1F	; 31
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <SR04Signal+0x1a>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <SR04Signal+0x20>
 2b8:	00 00       	nop
	_delay_ms(2);
	PORTB = 0xff;
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	95 e3       	ldi	r25, 0x35	; 53
 2c0:	9a 95       	dec	r25
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <SR04Signal+0x28>
 2c4:	00 00       	nop
	_delay_us(10);
	PORTB = 0x00;
 2c6:	15 b8       	out	0x05, r1	; 5
	
	//check of echo weer low is
	while (!echoDone);
 2c8:	80 91 04 01 	lds	r24, 0x0104
 2cc:	88 23       	and	r24, r24
 2ce:	e1 f3       	breq	.-8      	; 0x2c8 <SR04Signal+0x30>
	
	//berekening afstand
	distance = countTimer0/16E6;
 2d0:	60 91 00 01 	lds	r22, 0x0100
 2d4:	70 91 01 01 	lds	r23, 0x0101
 2d8:	80 91 02 01 	lds	r24, 0x0102
 2dc:	90 91 03 01 	lds	r25, 0x0103
 2e0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__floatunsisf>
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	34 e2       	ldi	r19, 0x24	; 36
 2e8:	44 e7       	ldi	r20, 0x74	; 116
 2ea:	5b e4       	ldi	r21, 0x4B	; 75
 2ec:	0e 94 de 02 	call	0x5bc	; 0x5bc <__divsf3>
	distance = 17013.0*distance;
 2f0:	46 2f       	mov	r20, r22
 2f2:	57 2f       	mov	r21, r23
 2f4:	68 2f       	mov	r22, r24
 2f6:	79 2f       	mov	r23, r25
 2f8:	cb 01       	movw	r24, r22
 2fa:	ba 01       	movw	r22, r20
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	3a ee       	ldi	r19, 0xEA	; 234
 300:	44 e8       	ldi	r20, 0x84	; 132
 302:	56 e4       	ldi	r21, 0x46	; 70
 304:	0e 94 00 04 	call	0x800	; 0x800 <__mulsf3>
	
	//verzenden naar serial
	transmit(distance);
 308:	0e 94 46 03 	call	0x68c	; 0x68c <__fixunssfsi>
 30c:	86 2f       	mov	r24, r22
 30e:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
}
 312:	08 95       	ret

00000314 <ADCsingleREAD>:
//AnalogRead
int ADCsingleREAD(uint8_t adctouse)
{
	int ADCval;

	ADMUX = adctouse;         // use #1 ADC
 314:	ec e7       	ldi	r30, 0x7C	; 124
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
 31a:	80 81       	ld	r24, Z
 31c:	80 64       	ori	r24, 0x40	; 64
 31e:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
 320:	80 81       	ld	r24, Z
 322:	8f 7d       	andi	r24, 0xDF	; 223
 324:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
 326:	ea e7       	ldi	r30, 0x7A	; 122
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	87 60       	ori	r24, 0x07	; 7
 32e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
 330:	80 81       	ld	r24, Z
 332:	80 68       	ori	r24, 0x80	; 128
 334:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
 336:	80 81       	ld	r24, Z
 338:	80 64       	ori	r24, 0x40	; 64
 33a:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
 33c:	80 81       	ld	r24, Z
 33e:	86 fd       	sbrc	r24, 6
 340:	fd cf       	rjmp	.-6      	; 0x33c <ADCsingleREAD+0x28>


	ADCval = ADCL;
 342:	20 91 78 00 	lds	r18, 0x0078
		ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
 346:	30 91 79 00 	lds	r19, 0x0079
 34a:	93 2f       	mov	r25, r19
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	82 0f       	add	r24, r18
 350:	91 1d       	adc	r25, r1

	return ADCval;
}
 352:	08 95       	ret

00000354 <readLDR>:
	transmit(1);
	transmit(temperatuur);
}
//lichtsensor
int readLDR()
{
 354:	cf 93       	push	r28
	int ADCvalue;
	ADCvalue = ADCsingleREAD(1);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 8a 01 	call	0x314	; 0x314 <ADCsingleREAD>
 35c:	c8 2f       	mov	r28, r24
	transmit(2);	
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
	transmit(ADCvalue);
 364:	8c 2f       	mov	r24, r28
 366:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
}
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <readTemp>:

	return ADCval;
}
//Temp sensor
int readTemp()
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
	int ADCvalue;
	ADCvalue = ADCsingleREAD(0);
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 8a 01 	call	0x314	; 0x314 <ADCsingleREAD>
 378:	ec 01       	movw	r28, r24
    float temperatuur = 0.00;
	temperatuur = ((ADCvalue * (5000.0/1024.0)) - 500.0) /10.0;
	transmit(1);
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
int readTemp()
{
	int ADCvalue;
	ADCvalue = ADCsingleREAD(0);
    float temperatuur = 0.00;
	temperatuur = ((ADCvalue * (5000.0/1024.0)) - 500.0) /10.0;
 380:	be 01       	movw	r22, r28
 382:	88 27       	eor	r24, r24
 384:	77 fd       	sbrc	r23, 7
 386:	80 95       	com	r24
 388:	98 2f       	mov	r25, r24
 38a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__floatsisf>
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e4       	ldi	r19, 0x40	; 64
 392:	4c e9       	ldi	r20, 0x9C	; 156
 394:	50 e4       	ldi	r21, 0x40	; 64
 396:	0e 94 00 04 	call	0x800	; 0x800 <__mulsf3>
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	4a ef       	ldi	r20, 0xFA	; 250
 3a0:	53 e4       	ldi	r21, 0x43	; 67
 3a2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__subsf3>
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	40 e2       	ldi	r20, 0x20	; 32
 3ac:	51 e4       	ldi	r21, 0x41	; 65
 3ae:	0e 94 de 02 	call	0x5bc	; 0x5bc <__divsf3>
	transmit(1);
	transmit(temperatuur);
 3b2:	0e 94 46 03 	call	0x68c	; 0x68c <__fixunssfsi>
 3b6:	86 2f       	mov	r24, r22
 3b8:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <__vector_16>:
	//verzenden naar serial
	transmit(distance);
}

//overflow interrupt op timer 0
ISR(TIMER0_OVF_vect){
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
 3d0:	af 93       	push	r26
 3d2:	bf 93       	push	r27
	countTimer0 += 255;
 3d4:	80 91 00 01 	lds	r24, 0x0100
 3d8:	90 91 01 01 	lds	r25, 0x0101
 3dc:	a0 91 02 01 	lds	r26, 0x0102
 3e0:	b0 91 03 01 	lds	r27, 0x0103
 3e4:	81 50       	subi	r24, 0x01	; 1
 3e6:	9f 4f       	sbci	r25, 0xFF	; 255
 3e8:	af 4f       	sbci	r26, 0xFF	; 255
 3ea:	bf 4f       	sbci	r27, 0xFF	; 255
 3ec:	80 93 00 01 	sts	0x0100, r24
 3f0:	90 93 01 01 	sts	0x0101, r25
 3f4:	a0 93 02 01 	sts	0x0102, r26
 3f8:	b0 93 03 01 	sts	0x0103, r27
}
 3fc:	bf 91       	pop	r27
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <__vector_3>:
//Interrupt voor PCINT0 ECHO PIN(pinb0)
ISR (PCINT0_vect){
 40e:	1f 92       	push	r1
 410:	0f 92       	push	r0
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	0f 92       	push	r0
 416:	11 24       	eor	r1, r1
 418:	2f 93       	push	r18
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
 41e:	af 93       	push	r26
 420:	bf 93       	push	r27
 422:	ef 93       	push	r30
 424:	ff 93       	push	r31
	//als echo pin aan gaat de timer starten
	if (PINB != 0x00){
 426:	83 b1       	in	r24, 0x03	; 3
 428:	88 23       	and	r24, r24
 42a:	59 f0       	breq	.+22     	; 0x442 <__vector_3+0x34>

		PORTD = 0xff;
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	8b b9       	out	0x0b, r24	; 11
		TCCR0B |= (1<<CS00);
 430:	85 b5       	in	r24, 0x25	; 37
 432:	81 60       	ori	r24, 0x01	; 1
 434:	85 bd       	out	0x25, r24	; 37
		TIMSK0 |= 1<<TOIE0;
 436:	ee e6       	ldi	r30, 0x6E	; 110
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	80 83       	st	Z, r24
 440:	1d c0       	rjmp	.+58     	; 0x47c <__vector_3+0x6e>

	}//als echo pin uit gaat de timer stoppen en waarden aan countTimer0 meegeven
	else{
		PORTD = 0x00;
 442:	1b b8       	out	0x0b, r1	; 11
		TCCR0B &= ~(1<<CS00);
 444:	85 b5       	in	r24, 0x25	; 37
 446:	8e 7f       	andi	r24, 0xFE	; 254
 448:	85 bd       	out	0x25, r24	; 37
		countTimer0 += TCNT0;
 44a:	26 b5       	in	r18, 0x26	; 38
 44c:	80 91 00 01 	lds	r24, 0x0100
 450:	90 91 01 01 	lds	r25, 0x0101
 454:	a0 91 02 01 	lds	r26, 0x0102
 458:	b0 91 03 01 	lds	r27, 0x0103
 45c:	82 0f       	add	r24, r18
 45e:	91 1d       	adc	r25, r1
 460:	a1 1d       	adc	r26, r1
 462:	b1 1d       	adc	r27, r1
 464:	80 93 00 01 	sts	0x0100, r24
 468:	90 93 01 01 	sts	0x0101, r25
 46c:	a0 93 02 01 	sts	0x0102, r26
 470:	b0 93 03 01 	sts	0x0103, r27
		TCNT0 = 0;
 474:	16 bc       	out	0x26, r1	; 38
		//echoDone flag op 1 zetten zodat ermee kan worden gerekend
		echoDone = 1;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	80 93 04 01 	sts	0x0104, r24

	}
}
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <main>:

int main() {
	
	//Poort init
	DDRB = 0xfe;
 494:	8e ef       	ldi	r24, 0xFE	; 254
 496:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff;
 498:	8f ef       	ldi	r24, 0xFF	; 255
 49a:	8a b9       	out	0x0a, r24	; 10
		
	//PCINT0 init
	PCICR |= (1 << PCIE0);
 49c:	e8 e6       	ldi	r30, 0x68	; 104
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	81 60       	ori	r24, 0x01	; 1
 4a4:	80 83       	st	Z, r24
	PCMSK0 |= (1<< PCINT0);
 4a6:	eb e6       	ldi	r30, 0x6B	; 107
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	80 83       	st	Z, r24
	
	uart_init();//init serialisering
 4b0:	0e 94 36 01 	call	0x26c	; 0x26c <uart_init>
	
	//scheduler
	SCH_Init_T1();
 4b4:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	SCH_Add_Task(readTemp,0,300);
 4b8:	87 eb       	ldi	r24, 0xB7	; 183
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	4c e2       	ldi	r20, 0x2C	; 44
 4c2:	51 e0       	ldi	r21, 0x01	; 1
 4c4:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(readLDR,100,300);
 4c8:	8a ea       	ldi	r24, 0xAA	; 170
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	64 e6       	ldi	r22, 0x64	; 100
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	4c e2       	ldi	r20, 0x2C	; 44
 4d2:	51 e0       	ldi	r21, 0x01	; 1
 4d4:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(SR04Signal,200,300);
 4d8:	8c e4       	ldi	r24, 0x4C	; 76
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	68 ec       	ldi	r22, 0xC8	; 200
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	4c e2       	ldi	r20, 0x2C	; 44
 4e2:	51 e0       	ldi	r21, 0x01	; 1
 4e4:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();
 4e8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>
	
	//run scheduler
	while(1) {
		SCH_Dispatch_Tasks();
 4ec:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
 4f0:	fd cf       	rjmp	.-6      	; 0x4ec <main+0x58>

000004f2 <__subsf3>:
 4f2:	50 58       	subi	r21, 0x80	; 128

000004f4 <__addsf3>:
 4f4:	bb 27       	eor	r27, r27
 4f6:	aa 27       	eor	r26, r26
 4f8:	0e d0       	rcall	.+28     	; 0x516 <__addsf3x>
 4fa:	48 c1       	rjmp	.+656    	; 0x78c <__fp_round>
 4fc:	39 d1       	rcall	.+626    	; 0x770 <__fp_pscA>
 4fe:	30 f0       	brcs	.+12     	; 0x50c <__addsf3+0x18>
 500:	3e d1       	rcall	.+636    	; 0x77e <__fp_pscB>
 502:	20 f0       	brcs	.+8      	; 0x50c <__addsf3+0x18>
 504:	31 f4       	brne	.+12     	; 0x512 <__addsf3+0x1e>
 506:	9f 3f       	cpi	r25, 0xFF	; 255
 508:	11 f4       	brne	.+4      	; 0x50e <__addsf3+0x1a>
 50a:	1e f4       	brtc	.+6      	; 0x512 <__addsf3+0x1e>
 50c:	2e c1       	rjmp	.+604    	; 0x76a <__fp_nan>
 50e:	0e f4       	brtc	.+2      	; 0x512 <__addsf3+0x1e>
 510:	e0 95       	com	r30
 512:	e7 fb       	bst	r30, 7
 514:	24 c1       	rjmp	.+584    	; 0x75e <__fp_inf>

00000516 <__addsf3x>:
 516:	e9 2f       	mov	r30, r25
 518:	4a d1       	rcall	.+660    	; 0x7ae <__fp_split3>
 51a:	80 f3       	brcs	.-32     	; 0x4fc <__addsf3+0x8>
 51c:	ba 17       	cp	r27, r26
 51e:	62 07       	cpc	r22, r18
 520:	73 07       	cpc	r23, r19
 522:	84 07       	cpc	r24, r20
 524:	95 07       	cpc	r25, r21
 526:	18 f0       	brcs	.+6      	; 0x52e <__addsf3x+0x18>
 528:	71 f4       	brne	.+28     	; 0x546 <__addsf3x+0x30>
 52a:	9e f5       	brtc	.+102    	; 0x592 <__addsf3x+0x7c>
 52c:	62 c1       	rjmp	.+708    	; 0x7f2 <__fp_zero>
 52e:	0e f4       	brtc	.+2      	; 0x532 <__addsf3x+0x1c>
 530:	e0 95       	com	r30
 532:	0b 2e       	mov	r0, r27
 534:	ba 2f       	mov	r27, r26
 536:	a0 2d       	mov	r26, r0
 538:	0b 01       	movw	r0, r22
 53a:	b9 01       	movw	r22, r18
 53c:	90 01       	movw	r18, r0
 53e:	0c 01       	movw	r0, r24
 540:	ca 01       	movw	r24, r20
 542:	a0 01       	movw	r20, r0
 544:	11 24       	eor	r1, r1
 546:	ff 27       	eor	r31, r31
 548:	59 1b       	sub	r21, r25
 54a:	99 f0       	breq	.+38     	; 0x572 <__addsf3x+0x5c>
 54c:	59 3f       	cpi	r21, 0xF9	; 249
 54e:	50 f4       	brcc	.+20     	; 0x564 <__addsf3x+0x4e>
 550:	50 3e       	cpi	r21, 0xE0	; 224
 552:	68 f1       	brcs	.+90     	; 0x5ae <__addsf3x+0x98>
 554:	1a 16       	cp	r1, r26
 556:	f0 40       	sbci	r31, 0x00	; 0
 558:	a2 2f       	mov	r26, r18
 55a:	23 2f       	mov	r18, r19
 55c:	34 2f       	mov	r19, r20
 55e:	44 27       	eor	r20, r20
 560:	58 5f       	subi	r21, 0xF8	; 248
 562:	f3 cf       	rjmp	.-26     	; 0x54a <__addsf3x+0x34>
 564:	46 95       	lsr	r20
 566:	37 95       	ror	r19
 568:	27 95       	ror	r18
 56a:	a7 95       	ror	r26
 56c:	f0 40       	sbci	r31, 0x00	; 0
 56e:	53 95       	inc	r21
 570:	c9 f7       	brne	.-14     	; 0x564 <__addsf3x+0x4e>
 572:	7e f4       	brtc	.+30     	; 0x592 <__addsf3x+0x7c>
 574:	1f 16       	cp	r1, r31
 576:	ba 0b       	sbc	r27, r26
 578:	62 0b       	sbc	r22, r18
 57a:	73 0b       	sbc	r23, r19
 57c:	84 0b       	sbc	r24, r20
 57e:	ba f0       	brmi	.+46     	; 0x5ae <__addsf3x+0x98>
 580:	91 50       	subi	r25, 0x01	; 1
 582:	a1 f0       	breq	.+40     	; 0x5ac <__addsf3x+0x96>
 584:	ff 0f       	add	r31, r31
 586:	bb 1f       	adc	r27, r27
 588:	66 1f       	adc	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	c2 f7       	brpl	.-16     	; 0x580 <__addsf3x+0x6a>
 590:	0e c0       	rjmp	.+28     	; 0x5ae <__addsf3x+0x98>
 592:	ba 0f       	add	r27, r26
 594:	62 1f       	adc	r22, r18
 596:	73 1f       	adc	r23, r19
 598:	84 1f       	adc	r24, r20
 59a:	48 f4       	brcc	.+18     	; 0x5ae <__addsf3x+0x98>
 59c:	87 95       	ror	r24
 59e:	77 95       	ror	r23
 5a0:	67 95       	ror	r22
 5a2:	b7 95       	ror	r27
 5a4:	f7 95       	ror	r31
 5a6:	9e 3f       	cpi	r25, 0xFE	; 254
 5a8:	08 f0       	brcs	.+2      	; 0x5ac <__addsf3x+0x96>
 5aa:	b3 cf       	rjmp	.-154    	; 0x512 <__addsf3+0x1e>
 5ac:	93 95       	inc	r25
 5ae:	88 0f       	add	r24, r24
 5b0:	08 f0       	brcs	.+2      	; 0x5b4 <__addsf3x+0x9e>
 5b2:	99 27       	eor	r25, r25
 5b4:	ee 0f       	add	r30, r30
 5b6:	97 95       	ror	r25
 5b8:	87 95       	ror	r24
 5ba:	08 95       	ret

000005bc <__divsf3>:
 5bc:	0c d0       	rcall	.+24     	; 0x5d6 <__divsf3x>
 5be:	e6 c0       	rjmp	.+460    	; 0x78c <__fp_round>
 5c0:	de d0       	rcall	.+444    	; 0x77e <__fp_pscB>
 5c2:	40 f0       	brcs	.+16     	; 0x5d4 <__divsf3+0x18>
 5c4:	d5 d0       	rcall	.+426    	; 0x770 <__fp_pscA>
 5c6:	30 f0       	brcs	.+12     	; 0x5d4 <__divsf3+0x18>
 5c8:	21 f4       	brne	.+8      	; 0x5d2 <__divsf3+0x16>
 5ca:	5f 3f       	cpi	r21, 0xFF	; 255
 5cc:	19 f0       	breq	.+6      	; 0x5d4 <__divsf3+0x18>
 5ce:	c7 c0       	rjmp	.+398    	; 0x75e <__fp_inf>
 5d0:	51 11       	cpse	r21, r1
 5d2:	10 c1       	rjmp	.+544    	; 0x7f4 <__fp_szero>
 5d4:	ca c0       	rjmp	.+404    	; 0x76a <__fp_nan>

000005d6 <__divsf3x>:
 5d6:	eb d0       	rcall	.+470    	; 0x7ae <__fp_split3>
 5d8:	98 f3       	brcs	.-26     	; 0x5c0 <__divsf3+0x4>

000005da <__divsf3_pse>:
 5da:	99 23       	and	r25, r25
 5dc:	c9 f3       	breq	.-14     	; 0x5d0 <__divsf3+0x14>
 5de:	55 23       	and	r21, r21
 5e0:	b1 f3       	breq	.-20     	; 0x5ce <__divsf3+0x12>
 5e2:	95 1b       	sub	r25, r21
 5e4:	55 0b       	sbc	r21, r21
 5e6:	bb 27       	eor	r27, r27
 5e8:	aa 27       	eor	r26, r26
 5ea:	62 17       	cp	r22, r18
 5ec:	73 07       	cpc	r23, r19
 5ee:	84 07       	cpc	r24, r20
 5f0:	38 f0       	brcs	.+14     	; 0x600 <__divsf3_pse+0x26>
 5f2:	9f 5f       	subi	r25, 0xFF	; 255
 5f4:	5f 4f       	sbci	r21, 0xFF	; 255
 5f6:	22 0f       	add	r18, r18
 5f8:	33 1f       	adc	r19, r19
 5fa:	44 1f       	adc	r20, r20
 5fc:	aa 1f       	adc	r26, r26
 5fe:	a9 f3       	breq	.-22     	; 0x5ea <__divsf3_pse+0x10>
 600:	33 d0       	rcall	.+102    	; 0x668 <__divsf3_pse+0x8e>
 602:	0e 2e       	mov	r0, r30
 604:	3a f0       	brmi	.+14     	; 0x614 <__divsf3_pse+0x3a>
 606:	e0 e8       	ldi	r30, 0x80	; 128
 608:	30 d0       	rcall	.+96     	; 0x66a <__divsf3_pse+0x90>
 60a:	91 50       	subi	r25, 0x01	; 1
 60c:	50 40       	sbci	r21, 0x00	; 0
 60e:	e6 95       	lsr	r30
 610:	00 1c       	adc	r0, r0
 612:	ca f7       	brpl	.-14     	; 0x606 <__divsf3_pse+0x2c>
 614:	29 d0       	rcall	.+82     	; 0x668 <__divsf3_pse+0x8e>
 616:	fe 2f       	mov	r31, r30
 618:	27 d0       	rcall	.+78     	; 0x668 <__divsf3_pse+0x8e>
 61a:	66 0f       	add	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	bb 1f       	adc	r27, r27
 622:	26 17       	cp	r18, r22
 624:	37 07       	cpc	r19, r23
 626:	48 07       	cpc	r20, r24
 628:	ab 07       	cpc	r26, r27
 62a:	b0 e8       	ldi	r27, 0x80	; 128
 62c:	09 f0       	breq	.+2      	; 0x630 <__divsf3_pse+0x56>
 62e:	bb 0b       	sbc	r27, r27
 630:	80 2d       	mov	r24, r0
 632:	bf 01       	movw	r22, r30
 634:	ff 27       	eor	r31, r31
 636:	93 58       	subi	r25, 0x83	; 131
 638:	5f 4f       	sbci	r21, 0xFF	; 255
 63a:	2a f0       	brmi	.+10     	; 0x646 <__divsf3_pse+0x6c>
 63c:	9e 3f       	cpi	r25, 0xFE	; 254
 63e:	51 05       	cpc	r21, r1
 640:	68 f0       	brcs	.+26     	; 0x65c <__divsf3_pse+0x82>
 642:	8d c0       	rjmp	.+282    	; 0x75e <__fp_inf>
 644:	d7 c0       	rjmp	.+430    	; 0x7f4 <__fp_szero>
 646:	5f 3f       	cpi	r21, 0xFF	; 255
 648:	ec f3       	brlt	.-6      	; 0x644 <__divsf3_pse+0x6a>
 64a:	98 3e       	cpi	r25, 0xE8	; 232
 64c:	dc f3       	brlt	.-10     	; 0x644 <__divsf3_pse+0x6a>
 64e:	86 95       	lsr	r24
 650:	77 95       	ror	r23
 652:	67 95       	ror	r22
 654:	b7 95       	ror	r27
 656:	f7 95       	ror	r31
 658:	9f 5f       	subi	r25, 0xFF	; 255
 65a:	c9 f7       	brne	.-14     	; 0x64e <__divsf3_pse+0x74>
 65c:	88 0f       	add	r24, r24
 65e:	91 1d       	adc	r25, r1
 660:	96 95       	lsr	r25
 662:	87 95       	ror	r24
 664:	97 f9       	bld	r25, 7
 666:	08 95       	ret
 668:	e1 e0       	ldi	r30, 0x01	; 1
 66a:	66 0f       	add	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	88 1f       	adc	r24, r24
 670:	bb 1f       	adc	r27, r27
 672:	62 17       	cp	r22, r18
 674:	73 07       	cpc	r23, r19
 676:	84 07       	cpc	r24, r20
 678:	ba 07       	cpc	r27, r26
 67a:	20 f0       	brcs	.+8      	; 0x684 <__divsf3_pse+0xaa>
 67c:	62 1b       	sub	r22, r18
 67e:	73 0b       	sbc	r23, r19
 680:	84 0b       	sbc	r24, r20
 682:	ba 0b       	sbc	r27, r26
 684:	ee 1f       	adc	r30, r30
 686:	88 f7       	brcc	.-30     	; 0x66a <__divsf3_pse+0x90>
 688:	e0 95       	com	r30
 68a:	08 95       	ret

0000068c <__fixunssfsi>:
 68c:	98 d0       	rcall	.+304    	; 0x7be <__fp_splitA>
 68e:	88 f0       	brcs	.+34     	; 0x6b2 <__fixunssfsi+0x26>
 690:	9f 57       	subi	r25, 0x7F	; 127
 692:	90 f0       	brcs	.+36     	; 0x6b8 <__fixunssfsi+0x2c>
 694:	b9 2f       	mov	r27, r25
 696:	99 27       	eor	r25, r25
 698:	b7 51       	subi	r27, 0x17	; 23
 69a:	a0 f0       	brcs	.+40     	; 0x6c4 <__fixunssfsi+0x38>
 69c:	d1 f0       	breq	.+52     	; 0x6d2 <__fixunssfsi+0x46>
 69e:	66 0f       	add	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	1a f0       	brmi	.+6      	; 0x6ae <__fixunssfsi+0x22>
 6a8:	ba 95       	dec	r27
 6aa:	c9 f7       	brne	.-14     	; 0x69e <__fixunssfsi+0x12>
 6ac:	12 c0       	rjmp	.+36     	; 0x6d2 <__fixunssfsi+0x46>
 6ae:	b1 30       	cpi	r27, 0x01	; 1
 6b0:	81 f0       	breq	.+32     	; 0x6d2 <__fixunssfsi+0x46>
 6b2:	9f d0       	rcall	.+318    	; 0x7f2 <__fp_zero>
 6b4:	b1 e0       	ldi	r27, 0x01	; 1
 6b6:	08 95       	ret
 6b8:	9c c0       	rjmp	.+312    	; 0x7f2 <__fp_zero>
 6ba:	67 2f       	mov	r22, r23
 6bc:	78 2f       	mov	r23, r24
 6be:	88 27       	eor	r24, r24
 6c0:	b8 5f       	subi	r27, 0xF8	; 248
 6c2:	39 f0       	breq	.+14     	; 0x6d2 <__fixunssfsi+0x46>
 6c4:	b9 3f       	cpi	r27, 0xF9	; 249
 6c6:	cc f3       	brlt	.-14     	; 0x6ba <__fixunssfsi+0x2e>
 6c8:	86 95       	lsr	r24
 6ca:	77 95       	ror	r23
 6cc:	67 95       	ror	r22
 6ce:	b3 95       	inc	r27
 6d0:	d9 f7       	brne	.-10     	; 0x6c8 <__fixunssfsi+0x3c>
 6d2:	3e f4       	brtc	.+14     	; 0x6e2 <__fixunssfsi+0x56>
 6d4:	90 95       	com	r25
 6d6:	80 95       	com	r24
 6d8:	70 95       	com	r23
 6da:	61 95       	neg	r22
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255
 6de:	8f 4f       	sbci	r24, 0xFF	; 255
 6e0:	9f 4f       	sbci	r25, 0xFF	; 255
 6e2:	08 95       	ret

000006e4 <__floatunsisf>:
 6e4:	e8 94       	clt
 6e6:	09 c0       	rjmp	.+18     	; 0x6fa <__floatsisf+0x12>

000006e8 <__floatsisf>:
 6e8:	97 fb       	bst	r25, 7
 6ea:	3e f4       	brtc	.+14     	; 0x6fa <__floatsisf+0x12>
 6ec:	90 95       	com	r25
 6ee:	80 95       	com	r24
 6f0:	70 95       	com	r23
 6f2:	61 95       	neg	r22
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	99 23       	and	r25, r25
 6fc:	a9 f0       	breq	.+42     	; 0x728 <__floatsisf+0x40>
 6fe:	f9 2f       	mov	r31, r25
 700:	96 e9       	ldi	r25, 0x96	; 150
 702:	bb 27       	eor	r27, r27
 704:	93 95       	inc	r25
 706:	f6 95       	lsr	r31
 708:	87 95       	ror	r24
 70a:	77 95       	ror	r23
 70c:	67 95       	ror	r22
 70e:	b7 95       	ror	r27
 710:	f1 11       	cpse	r31, r1
 712:	f8 cf       	rjmp	.-16     	; 0x704 <__floatsisf+0x1c>
 714:	fa f4       	brpl	.+62     	; 0x754 <__floatsisf+0x6c>
 716:	bb 0f       	add	r27, r27
 718:	11 f4       	brne	.+4      	; 0x71e <__floatsisf+0x36>
 71a:	60 ff       	sbrs	r22, 0
 71c:	1b c0       	rjmp	.+54     	; 0x754 <__floatsisf+0x6c>
 71e:	6f 5f       	subi	r22, 0xFF	; 255
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	8f 4f       	sbci	r24, 0xFF	; 255
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	16 c0       	rjmp	.+44     	; 0x754 <__floatsisf+0x6c>
 728:	88 23       	and	r24, r24
 72a:	11 f0       	breq	.+4      	; 0x730 <__floatsisf+0x48>
 72c:	96 e9       	ldi	r25, 0x96	; 150
 72e:	11 c0       	rjmp	.+34     	; 0x752 <__floatsisf+0x6a>
 730:	77 23       	and	r23, r23
 732:	21 f0       	breq	.+8      	; 0x73c <__floatsisf+0x54>
 734:	9e e8       	ldi	r25, 0x8E	; 142
 736:	87 2f       	mov	r24, r23
 738:	76 2f       	mov	r23, r22
 73a:	05 c0       	rjmp	.+10     	; 0x746 <__floatsisf+0x5e>
 73c:	66 23       	and	r22, r22
 73e:	71 f0       	breq	.+28     	; 0x75c <__floatsisf+0x74>
 740:	96 e8       	ldi	r25, 0x86	; 134
 742:	86 2f       	mov	r24, r22
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	2a f0       	brmi	.+10     	; 0x754 <__floatsisf+0x6c>
 74a:	9a 95       	dec	r25
 74c:	66 0f       	add	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	88 1f       	adc	r24, r24
 752:	da f7       	brpl	.-10     	; 0x74a <__floatsisf+0x62>
 754:	88 0f       	add	r24, r24
 756:	96 95       	lsr	r25
 758:	87 95       	ror	r24
 75a:	97 f9       	bld	r25, 7
 75c:	08 95       	ret

0000075e <__fp_inf>:
 75e:	97 f9       	bld	r25, 7
 760:	9f 67       	ori	r25, 0x7F	; 127
 762:	80 e8       	ldi	r24, 0x80	; 128
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	08 95       	ret

0000076a <__fp_nan>:
 76a:	9f ef       	ldi	r25, 0xFF	; 255
 76c:	80 ec       	ldi	r24, 0xC0	; 192
 76e:	08 95       	ret

00000770 <__fp_pscA>:
 770:	00 24       	eor	r0, r0
 772:	0a 94       	dec	r0
 774:	16 16       	cp	r1, r22
 776:	17 06       	cpc	r1, r23
 778:	18 06       	cpc	r1, r24
 77a:	09 06       	cpc	r0, r25
 77c:	08 95       	ret

0000077e <__fp_pscB>:
 77e:	00 24       	eor	r0, r0
 780:	0a 94       	dec	r0
 782:	12 16       	cp	r1, r18
 784:	13 06       	cpc	r1, r19
 786:	14 06       	cpc	r1, r20
 788:	05 06       	cpc	r0, r21
 78a:	08 95       	ret

0000078c <__fp_round>:
 78c:	09 2e       	mov	r0, r25
 78e:	03 94       	inc	r0
 790:	00 0c       	add	r0, r0
 792:	11 f4       	brne	.+4      	; 0x798 <__fp_round+0xc>
 794:	88 23       	and	r24, r24
 796:	52 f0       	brmi	.+20     	; 0x7ac <__fp_round+0x20>
 798:	bb 0f       	add	r27, r27
 79a:	40 f4       	brcc	.+16     	; 0x7ac <__fp_round+0x20>
 79c:	bf 2b       	or	r27, r31
 79e:	11 f4       	brne	.+4      	; 0x7a4 <__fp_round+0x18>
 7a0:	60 ff       	sbrs	r22, 0
 7a2:	04 c0       	rjmp	.+8      	; 0x7ac <__fp_round+0x20>
 7a4:	6f 5f       	subi	r22, 0xFF	; 255
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	08 95       	ret

000007ae <__fp_split3>:
 7ae:	57 fd       	sbrc	r21, 7
 7b0:	90 58       	subi	r25, 0x80	; 128
 7b2:	44 0f       	add	r20, r20
 7b4:	55 1f       	adc	r21, r21
 7b6:	59 f0       	breq	.+22     	; 0x7ce <__fp_splitA+0x10>
 7b8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ba:	71 f0       	breq	.+28     	; 0x7d8 <__fp_splitA+0x1a>
 7bc:	47 95       	ror	r20

000007be <__fp_splitA>:
 7be:	88 0f       	add	r24, r24
 7c0:	97 fb       	bst	r25, 7
 7c2:	99 1f       	adc	r25, r25
 7c4:	61 f0       	breq	.+24     	; 0x7de <__fp_splitA+0x20>
 7c6:	9f 3f       	cpi	r25, 0xFF	; 255
 7c8:	79 f0       	breq	.+30     	; 0x7e8 <__fp_splitA+0x2a>
 7ca:	87 95       	ror	r24
 7cc:	08 95       	ret
 7ce:	12 16       	cp	r1, r18
 7d0:	13 06       	cpc	r1, r19
 7d2:	14 06       	cpc	r1, r20
 7d4:	55 1f       	adc	r21, r21
 7d6:	f2 cf       	rjmp	.-28     	; 0x7bc <__fp_split3+0xe>
 7d8:	46 95       	lsr	r20
 7da:	f1 df       	rcall	.-30     	; 0x7be <__fp_splitA>
 7dc:	08 c0       	rjmp	.+16     	; 0x7ee <__fp_splitA+0x30>
 7de:	16 16       	cp	r1, r22
 7e0:	17 06       	cpc	r1, r23
 7e2:	18 06       	cpc	r1, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	f1 cf       	rjmp	.-30     	; 0x7ca <__fp_splitA+0xc>
 7e8:	86 95       	lsr	r24
 7ea:	71 05       	cpc	r23, r1
 7ec:	61 05       	cpc	r22, r1
 7ee:	08 94       	sec
 7f0:	08 95       	ret

000007f2 <__fp_zero>:
 7f2:	e8 94       	clt

000007f4 <__fp_szero>:
 7f4:	bb 27       	eor	r27, r27
 7f6:	66 27       	eor	r22, r22
 7f8:	77 27       	eor	r23, r23
 7fa:	cb 01       	movw	r24, r22
 7fc:	97 f9       	bld	r25, 7
 7fe:	08 95       	ret

00000800 <__mulsf3>:
 800:	0b d0       	rcall	.+22     	; 0x818 <__mulsf3x>
 802:	c4 cf       	rjmp	.-120    	; 0x78c <__fp_round>
 804:	b5 df       	rcall	.-150    	; 0x770 <__fp_pscA>
 806:	28 f0       	brcs	.+10     	; 0x812 <__mulsf3+0x12>
 808:	ba df       	rcall	.-140    	; 0x77e <__fp_pscB>
 80a:	18 f0       	brcs	.+6      	; 0x812 <__mulsf3+0x12>
 80c:	95 23       	and	r25, r21
 80e:	09 f0       	breq	.+2      	; 0x812 <__mulsf3+0x12>
 810:	a6 cf       	rjmp	.-180    	; 0x75e <__fp_inf>
 812:	ab cf       	rjmp	.-170    	; 0x76a <__fp_nan>
 814:	11 24       	eor	r1, r1
 816:	ee cf       	rjmp	.-36     	; 0x7f4 <__fp_szero>

00000818 <__mulsf3x>:
 818:	ca df       	rcall	.-108    	; 0x7ae <__fp_split3>
 81a:	a0 f3       	brcs	.-24     	; 0x804 <__mulsf3+0x4>

0000081c <__mulsf3_pse>:
 81c:	95 9f       	mul	r25, r21
 81e:	d1 f3       	breq	.-12     	; 0x814 <__mulsf3+0x14>
 820:	95 0f       	add	r25, r21
 822:	50 e0       	ldi	r21, 0x00	; 0
 824:	55 1f       	adc	r21, r21
 826:	62 9f       	mul	r22, r18
 828:	f0 01       	movw	r30, r0
 82a:	72 9f       	mul	r23, r18
 82c:	bb 27       	eor	r27, r27
 82e:	f0 0d       	add	r31, r0
 830:	b1 1d       	adc	r27, r1
 832:	63 9f       	mul	r22, r19
 834:	aa 27       	eor	r26, r26
 836:	f0 0d       	add	r31, r0
 838:	b1 1d       	adc	r27, r1
 83a:	aa 1f       	adc	r26, r26
 83c:	64 9f       	mul	r22, r20
 83e:	66 27       	eor	r22, r22
 840:	b0 0d       	add	r27, r0
 842:	a1 1d       	adc	r26, r1
 844:	66 1f       	adc	r22, r22
 846:	82 9f       	mul	r24, r18
 848:	22 27       	eor	r18, r18
 84a:	b0 0d       	add	r27, r0
 84c:	a1 1d       	adc	r26, r1
 84e:	62 1f       	adc	r22, r18
 850:	73 9f       	mul	r23, r19
 852:	b0 0d       	add	r27, r0
 854:	a1 1d       	adc	r26, r1
 856:	62 1f       	adc	r22, r18
 858:	83 9f       	mul	r24, r19
 85a:	a0 0d       	add	r26, r0
 85c:	61 1d       	adc	r22, r1
 85e:	22 1f       	adc	r18, r18
 860:	74 9f       	mul	r23, r20
 862:	33 27       	eor	r19, r19
 864:	a0 0d       	add	r26, r0
 866:	61 1d       	adc	r22, r1
 868:	23 1f       	adc	r18, r19
 86a:	84 9f       	mul	r24, r20
 86c:	60 0d       	add	r22, r0
 86e:	21 1d       	adc	r18, r1
 870:	82 2f       	mov	r24, r18
 872:	76 2f       	mov	r23, r22
 874:	6a 2f       	mov	r22, r26
 876:	11 24       	eor	r1, r1
 878:	9f 57       	subi	r25, 0x7F	; 127
 87a:	50 40       	sbci	r21, 0x00	; 0
 87c:	8a f0       	brmi	.+34     	; 0x8a0 <__mulsf3_pse+0x84>
 87e:	e1 f0       	breq	.+56     	; 0x8b8 <__mulsf3_pse+0x9c>
 880:	88 23       	and	r24, r24
 882:	4a f0       	brmi	.+18     	; 0x896 <__mulsf3_pse+0x7a>
 884:	ee 0f       	add	r30, r30
 886:	ff 1f       	adc	r31, r31
 888:	bb 1f       	adc	r27, r27
 88a:	66 1f       	adc	r22, r22
 88c:	77 1f       	adc	r23, r23
 88e:	88 1f       	adc	r24, r24
 890:	91 50       	subi	r25, 0x01	; 1
 892:	50 40       	sbci	r21, 0x00	; 0
 894:	a9 f7       	brne	.-22     	; 0x880 <__mulsf3_pse+0x64>
 896:	9e 3f       	cpi	r25, 0xFE	; 254
 898:	51 05       	cpc	r21, r1
 89a:	70 f0       	brcs	.+28     	; 0x8b8 <__mulsf3_pse+0x9c>
 89c:	60 cf       	rjmp	.-320    	; 0x75e <__fp_inf>
 89e:	aa cf       	rjmp	.-172    	; 0x7f4 <__fp_szero>
 8a0:	5f 3f       	cpi	r21, 0xFF	; 255
 8a2:	ec f3       	brlt	.-6      	; 0x89e <__mulsf3_pse+0x82>
 8a4:	98 3e       	cpi	r25, 0xE8	; 232
 8a6:	dc f3       	brlt	.-10     	; 0x89e <__mulsf3_pse+0x82>
 8a8:	86 95       	lsr	r24
 8aa:	77 95       	ror	r23
 8ac:	67 95       	ror	r22
 8ae:	b7 95       	ror	r27
 8b0:	f7 95       	ror	r31
 8b2:	e7 95       	ror	r30
 8b4:	9f 5f       	subi	r25, 0xFF	; 255
 8b6:	c1 f7       	brne	.-16     	; 0x8a8 <__mulsf3_pse+0x8c>
 8b8:	fe 2b       	or	r31, r30
 8ba:	88 0f       	add	r24, r24
 8bc:	91 1d       	adc	r25, r1
 8be:	96 95       	lsr	r25
 8c0:	87 95       	ror	r24
 8c2:	97 f9       	bld	r25, 7
 8c4:	08 95       	ret

000008c6 <_exit>:
 8c6:	f8 94       	cli

000008c8 <__stop_program>:
 8c8:	ff cf       	rjmp	.-2      	; 0x8c8 <__stop_program>
