
Censoren.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000984  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800100  00800100  00000a18  2**0
                  ALLOC
  3 .stab         000023dc  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  00002df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00003560  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000852  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000351  00000000  00000000  00003e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fa  00000000  00000000  000041a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000046a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fb  00000000  00000000  00004898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000548  00000000  00000000  00004b93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <main>
  9e:	0c 94 c0 04 	jmp	0x980	; 0x980 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
  b0:	eb 01       	movw	r28, r22
  b2:	da 01       	movw	r26, r20
  b4:	80 91 05 01 	lds	r24, 0x0105
  b8:	90 91 06 01 	lds	r25, 0x0106
  bc:	00 97       	sbiw	r24, 0x00	; 0
  be:	b1 f0       	breq	.+44     	; 0xec <SCH_Add_Task+0x46>
  c0:	ec e0       	ldi	r30, 0x0C	; 12
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	42 2f       	mov	r20, r18
  ca:	b9 01       	movw	r22, r18
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	41 f0       	breq	.+16     	; 0xe4 <SCH_Add_Task+0x3e>
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	37 96       	adiw	r30, 0x07	; 7
  da:	26 30       	cpi	r18, 0x06	; 6
  dc:	31 05       	cpc	r19, r1
  de:	a1 f7       	brne	.-24     	; 0xc8 <SCH_Add_Task+0x22>
  e0:	84 2f       	mov	r24, r20
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <SCH_Add_Task+0x40>
  e4:	82 2f       	mov	r24, r18
  e6:	85 30       	cpi	r24, 0x05	; 5
  e8:	21 f4       	brne	.+8      	; 0xf2 <SCH_Add_Task+0x4c>
  ea:	17 c0       	rjmp	.+46     	; 0x11a <SCH_Add_Task+0x74>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	86 1b       	sub	r24, r22
 102:	97 0b       	sbc	r25, r23
 104:	fc 01       	movw	r30, r24
 106:	eb 5f       	subi	r30, 0xFB	; 251
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	11 83       	std	Z+1, r17	; 0x01
 10c:	00 83       	st	Z, r16
 10e:	d3 83       	std	Z+3, r29	; 0x03
 110:	c2 83       	std	Z+2, r28	; 0x02
 112:	b5 83       	std	Z+5, r27	; 0x05
 114:	a4 83       	std	Z+4, r26	; 0x04
 116:	16 82       	std	Z+6, r1	; 0x06
 118:	84 2f       	mov	r24, r20
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <SCH_Delete_Task>:
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	ee 0f       	add	r30, r30
 12e:	ff 1f       	adc	r31, r31
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 1b       	sub	r30, r24
 136:	f9 0b       	sbc	r31, r25
 138:	eb 5f       	subi	r30, 0xFB	; 251
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	10 82       	st	Z, r1
 140:	13 82       	std	Z+3, r1	; 0x03
 142:	12 82       	std	Z+2, r1	; 0x02
 144:	15 82       	std	Z+5, r1	; 0x05
 146:	14 82       	std	Z+4, r1	; 0x04
 148:	16 82       	std	Z+6, r1	; 0x06
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 95       	ret

0000014e <SCH_Dispatch_Tasks>:
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	cb e0       	ldi	r28, 0x0B	; 11
 15e:	d1 e0       	ldi	r29, 0x01	; 1
 160:	0f 2e       	mov	r0, r31
 162:	fa ef       	ldi	r31, 0xFA	; 250
 164:	ef 2e       	mov	r14, r31
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	ff 2e       	mov	r15, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	ec 0e       	add	r14, r28
 16e:	fd 1e       	adc	r15, r29
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	91 f0       	breq	.+36     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 178:	d7 01       	movw	r26, r14
 17a:	ed 91       	ld	r30, X+
 17c:	fc 91       	ld	r31, X
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	61 f0       	breq	.+24     	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 184:	09 95       	icall
 186:	88 81       	ld	r24, Y
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	88 83       	st	Y, r24
 18c:	f7 01       	movw	r30, r14
 18e:	84 81       	ldd	r24, Z+4	; 0x04
 190:	95 81       	ldd	r25, Z+5	; 0x05
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	19 f4       	brne	.+6      	; 0x19c <SCH_Dispatch_Tasks+0x4e>
 196:	81 2f       	mov	r24, r17
 198:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	27 96       	adiw	r28, 0x07	; 7
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	15 30       	cpi	r17, 0x05	; 5
 1aa:	19 f7       	brne	.-58     	; 0x172 <SCH_Dispatch_Tasks+0x24>
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <SCH_Init_T1>:
 1bc:	cf 93       	push	r28
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 92 00 	call	0x124	; 0x124 <SCH_Delete_Task>
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	c5 30       	cpi	r28, 0x05	; 5
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <SCH_Init_T1+0x4>
 1cc:	81 e7       	ldi	r24, 0x71	; 113
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	90 93 89 00 	sts	0x0089, r25
 1d4:	80 93 88 00 	sts	0x0088, r24
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	80 93 81 00 	sts	0x0081, r24
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 6f 00 	sts	0x006F, r24
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <SCH_Start>:
 1e8:	78 94       	sei
 1ea:	08 95       	ret

000001ec <__vector_11>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	e5 e0       	ldi	r30, 0x05	; 5
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	df 01       	movw	r26, r30
 210:	16 96       	adiw	r26, 0x06	; 6
 212:	9f 01       	movw	r18, r30
 214:	2d 5d       	subi	r18, 0xDD	; 221
 216:	3f 4f       	sbci	r19, 0xFF	; 255
 218:	80 81       	ld	r24, Z
 21a:	91 81       	ldd	r25, Z+1	; 0x01
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	91 f0       	breq	.+36     	; 0x244 <__vector_11+0x58>
 220:	82 81       	ldd	r24, Z+2	; 0x02
 222:	93 81       	ldd	r25, Z+3	; 0x03
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	59 f4       	brne	.+22     	; 0x23e <__vector_11+0x52>
 228:	8c 91       	ld	r24, X
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	8c 93       	st	X, r24
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	39 f0       	breq	.+14     	; 0x244 <__vector_11+0x58>
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	93 83       	std	Z+3, r25	; 0x03
 23a:	82 83       	std	Z+2, r24	; 0x02
 23c:	03 c0       	rjmp	.+6      	; 0x244 <__vector_11+0x58>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	93 83       	std	Z+3, r25	; 0x03
 242:	82 83       	std	Z+2, r24	; 0x02
 244:	37 96       	adiw	r30, 0x07	; 7
 246:	17 96       	adiw	r26, 0x07	; 7
 248:	e2 17       	cp	r30, r18
 24a:	f3 07       	cpc	r31, r19
 24c:	29 f7       	brne	.-54     	; 0x218 <__vector_11+0x2c>
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <uart_init>:


//serialisering
void uart_init() {
	// set the baud rate
	UBRR0H = 19200;
 26c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBBRVAL;
 270:	83 e3       	ldi	r24, 0x33	; 51
 272:	80 93 c4 00 	sts	0x00C4, r24
	// disable U2X mode
	UCSR0A = 0;
 276:	10 92 c0 00 	sts	0x00C0, r1
	// enable transmitter and receiver
	UCSR0B = _BV(TXEN0)|_BV(RXEN0);
 27a:	88 e1       	ldi	r24, 0x18	; 24
 27c:	80 93 c1 00 	sts	0x00C1, r24
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	80 93 c2 00 	sts	0x00C2, r24
}
 286:	08 95       	ret

00000288 <transmit>:
//transmitten naar Realterm/Putty/Centrale
void transmit(uint8_t data)
{
	// wait for an empty transmit buffer
	// UDRE is set when transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 288:	e0 ec       	ldi	r30, 0xC0	; 192
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	90 81       	ld	r25, Z
 28e:	95 ff       	sbrs	r25, 5
 290:	fd cf       	rjmp	.-6      	; 0x28c <transmit+0x4>
	// send the data
	UDR0 = data;
 292:	80 93 c6 00 	sts	0x00C6, r24
}
 296:	08 95       	ret

00000298 <SR04Signal>:
	}
	transmit(LIGHT);	//Verstuur de status(licht/donker)
}

//zend sr04 signaal en reken hiermee
void SR04Signal(){
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29

	float distance = 0.00;

	//echoDone is een boolean die checkt of de echo klaar is
	//Als de echo pas klaar is mag ermee worden gerekend
	echoDone = 0;
 2a0:	10 92 04 01 	sts	0x0104, r1

	//Timer0 counter wordt gereset
	countTimer0 = 0;
 2a4:	10 92 00 01 	sts	0x0100, r1
 2a8:	10 92 01 01 	sts	0x0101, r1
 2ac:	10 92 02 01 	sts	0x0102, r1
 2b0:	10 92 03 01 	sts	0x0103, r1


	//pulse sturen naar de trigger
	PORTB = 0x00;
 2b4:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	8f e3       	ldi	r24, 0x3F	; 63
 2b8:	9f e1       	ldi	r25, 0x1F	; 31
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <SR04Signal+0x22>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <SR04Signal+0x28>
 2c0:	00 00       	nop
	_delay_ms(2);
	PORTB = 0xff;
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	95 e3       	ldi	r25, 0x35	; 53
 2c8:	9a 95       	dec	r25
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <SR04Signal+0x30>
 2cc:	00 00       	nop
	_delay_us(10);
	PORTB = 0x00;
 2ce:	15 b8       	out	0x05, r1	; 5

	//check of echo weer low is
	while (!echoDone);
 2d0:	80 91 04 01 	lds	r24, 0x0104
 2d4:	88 23       	and	r24, r24
 2d6:	e1 f3       	breq	.-8      	; 0x2d0 <SR04Signal+0x38>

	//berekening afstand
	distance = countTimer0/16E6;
 2d8:	60 91 00 01 	lds	r22, 0x0100
 2dc:	70 91 01 01 	lds	r23, 0x0101
 2e0:	80 91 02 01 	lds	r24, 0x0102
 2e4:	90 91 03 01 	lds	r25, 0x0103
 2e8:	0e 94 a7 03 	call	0x74e	; 0x74e <__floatunsisf>
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	34 e2       	ldi	r19, 0x24	; 36
 2f0:	44 e7       	ldi	r20, 0x74	; 116
 2f2:	5b e4       	ldi	r21, 0x4B	; 75
 2f4:	0e 94 13 03 	call	0x626	; 0x626 <__divsf3>
	distance = 17013.0*distance;
 2f8:	46 2f       	mov	r20, r22
 2fa:	57 2f       	mov	r21, r23
 2fc:	68 2f       	mov	r22, r24
 2fe:	79 2f       	mov	r23, r25
 300:	cb 01       	movw	r24, r22
 302:	ba 01       	movw	r22, r20
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	3a ee       	ldi	r19, 0xEA	; 234
 308:	44 e8       	ldi	r20, 0x84	; 132
 30a:	56 e4       	ldi	r21, 0x46	; 70
 30c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__mulsf3>
 310:	06 2f       	mov	r16, r22
 312:	17 2f       	mov	r17, r23
 314:	d8 2f       	mov	r29, r24
 316:	c9 2f       	mov	r28, r25

	//verzenden naar serial
	if(distance <= 6){transmit(5); PORTD = 0b00000100;}
 318:	86 2f       	mov	r24, r22
 31a:	91 2f       	mov	r25, r17
 31c:	ad 2f       	mov	r26, r29
 31e:	bc 2f       	mov	r27, r28
 320:	bc 01       	movw	r22, r24
 322:	cd 01       	movw	r24, r26
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 ec       	ldi	r20, 0xC0	; 192
 32a:	50 e4       	ldi	r21, 0x40	; 64
 32c:	0e 94 0f 03 	call	0x61e	; 0x61e <__cmpsf2>
 330:	18 16       	cp	r1, r24
 332:	34 f0       	brlt	.+12     	; 0x340 <SR04Signal+0xa8>
 334:	85 e0       	ldi	r24, 0x05	; 5
 336:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
 33a:	84 e0       	ldi	r24, 0x04	; 4
 33c:	8b b9       	out	0x0b, r24	; 11
 33e:	21 c0       	rjmp	.+66     	; 0x382 <SR04Signal+0xea>
	else if(distance > 160){transmit(161); PORTD = 0b00010000;}
 340:	80 2f       	mov	r24, r16
 342:	91 2f       	mov	r25, r17
 344:	ad 2f       	mov	r26, r29
 346:	bc 2f       	mov	r27, r28
 348:	bc 01       	movw	r22, r24
 34a:	cd 01       	movw	r24, r26
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	40 e2       	ldi	r20, 0x20	; 32
 352:	53 e4       	ldi	r21, 0x43	; 67
 354:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__gesf2>
 358:	18 16       	cp	r1, r24
 35a:	34 f4       	brge	.+12     	; 0x368 <SR04Signal+0xd0>
 35c:	81 ea       	ldi	r24, 0xA1	; 161
 35e:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
 362:	80 e1       	ldi	r24, 0x10	; 16
 364:	8b b9       	out	0x0b, r24	; 11
 366:	0d c0       	rjmp	.+26     	; 0x382 <SR04Signal+0xea>
	else{transmit(distance); PORTD = 0b00001000;}
 368:	80 2f       	mov	r24, r16
 36a:	91 2f       	mov	r25, r17
 36c:	ad 2f       	mov	r26, r29
 36e:	bc 2f       	mov	r27, r28
 370:	bc 01       	movw	r22, r24
 372:	cd 01       	movw	r24, r26
 374:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fixunssfsi>
 378:	86 2f       	mov	r24, r22
 37a:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
 37e:	88 e0       	ldi	r24, 0x08	; 8
 380:	8b b9       	out	0x0b, r24	; 11

}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <ADCsingleREAD>:
//AnalogRead
int ADCsingleREAD(uint8_t adctouse)
{
	int ADCval;

	ADMUX = adctouse;         // use #1 ADC
 38c:	ec e7       	ldi	r30, 0x7C	; 124
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
 392:	80 81       	ld	r24, Z
 394:	80 64       	ori	r24, 0x40	; 64
 396:	80 83       	st	Z, r24
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
 398:	80 81       	ld	r24, Z
 39a:	8f 7d       	andi	r24, 0xDF	; 223
 39c:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 16Mhz
 39e:	ea e7       	ldi	r30, 0x7A	; 122
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	87 60       	ori	r24, 0x07	; 7
 3a6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
 3a8:	80 81       	ld	r24, Z
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
 3ae:	80 81       	ld	r24, Z
 3b0:	80 64       	ori	r24, 0x40	; 64
 3b2:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
 3b4:	80 81       	ld	r24, Z
 3b6:	86 fd       	sbrc	r24, 6
 3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <ADCsingleREAD+0x28>


	ADCval = ADCL;
 3ba:	20 91 78 00 	lds	r18, 0x0078
		ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
 3be:	30 91 79 00 	lds	r19, 0x0079
 3c2:	93 2f       	mov	r25, r19
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	82 0f       	add	r24, r18
 3c8:	91 1d       	adc	r25, r1

	return ADCval;
}
 3ca:	08 95       	ret

000003cc <readLDR>:
//lichtsensor
int readLDR()
{
	int ADCvalue;	//int variabele ADCValue aanmaken
	int LIGHT;	//int variabele LIGHT aanmaken
	ADCvalue = ADCsingleREAD(1);	//Lees de ADC uit voor pin 1 en sla deze op in ADCValue
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 c6 01 	call	0x38c	; 0x38c <ADCsingleREAD>
	}
	if (ADCvalue > 150)
	{
		LIGHT = 1;
	}
	transmit(LIGHT);	//Verstuur de status(licht/donker)
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	87 39       	cpi	r24, 0x97	; 151
 3d6:	91 05       	cpc	r25, r1
 3d8:	0c f4       	brge	.+2      	; 0x3dc <readLDR+0x10>
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	82 2f       	mov	r24, r18
 3de:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
}
 3e2:	08 95       	ret

000003e4 <readTemp>:
}
//Temp sensor
int readTemp()
{
	int ADCvalue;	//int variabele ADCValue aanmaken
	ADCvalue = ADCsingleREAD(0);	//Lees de ADC uit voor pin 0 en sla deze op in ADCValue
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 c6 01 	call	0x38c	; 0x38c <ADCsingleREAD>
    float temperatuur = 0.00;	//Float variabele aanmaken voor het berekenen van- en opslaan van temperatuur
	temperatuur = ((ADCvalue * (5000.0/1024.0)) - 500.0) /10.0;	//Temperatuur berekenen uit ADCValue
 3ea:	9c 01       	movw	r18, r24
 3ec:	b9 01       	movw	r22, r18
 3ee:	88 27       	eor	r24, r24
 3f0:	77 fd       	sbrc	r23, 7
 3f2:	80 95       	com	r24
 3f4:	98 2f       	mov	r25, r24
 3f6:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e4       	ldi	r19, 0x40	; 64
 3fe:	4c e9       	ldi	r20, 0x9C	; 156
 400:	50 e4       	ldi	r21, 0x40	; 64
 402:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__mulsf3>
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	4a ef       	ldi	r20, 0xFA	; 250
 40c:	53 e4       	ldi	r21, 0x43	; 67
 40e:	0e 94 aa 02 	call	0x554	; 0x554 <__subsf3>
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	40 e2       	ldi	r20, 0x20	; 32
 418:	51 e4       	ldi	r21, 0x41	; 65
 41a:	0e 94 13 03 	call	0x626	; 0x626 <__divsf3>
	transmit(temperatuur);	//Verstuur de temperatuur via seriele verbinding.
 41e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fixunssfsi>
 422:	86 2f       	mov	r24, r22
 424:	0e 94 44 01 	call	0x288	; 0x288 <transmit>
}
 428:	08 95       	ret

0000042a <__vector_16>:
	else{transmit(distance); PORTD = 0b00001000;}

}

//overflow interrupt op timer 0
ISR(TIMER0_OVF_vect){
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
 438:	af 93       	push	r26
 43a:	bf 93       	push	r27
	countTimer0 += 255;
 43c:	80 91 00 01 	lds	r24, 0x0100
 440:	90 91 01 01 	lds	r25, 0x0101
 444:	a0 91 02 01 	lds	r26, 0x0102
 448:	b0 91 03 01 	lds	r27, 0x0103
 44c:	81 50       	subi	r24, 0x01	; 1
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	af 4f       	sbci	r26, 0xFF	; 255
 452:	bf 4f       	sbci	r27, 0xFF	; 255
 454:	80 93 00 01 	sts	0x0100, r24
 458:	90 93 01 01 	sts	0x0101, r25
 45c:	a0 93 02 01 	sts	0x0102, r26
 460:	b0 93 03 01 	sts	0x0103, r27
}
 464:	bf 91       	pop	r27
 466:	af 91       	pop	r26
 468:	9f 91       	pop	r25
 46a:	8f 91       	pop	r24
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <__vector_3>:
//Interrupt voor PCINT0 ECHO PIN(pinb0)
ISR (PCINT0_vect){
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	2f 93       	push	r18
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
	//als echo pin aan gaat de timer starten
	if (PINB != 0x00){
 48e:	83 b1       	in	r24, 0x03	; 3
 490:	88 23       	and	r24, r24
 492:	49 f0       	breq	.+18     	; 0x4a6 <__vector_3+0x30>

		TCCR0B |= (1<<CS00);
 494:	85 b5       	in	r24, 0x25	; 37
 496:	81 60       	ori	r24, 0x01	; 1
 498:	85 bd       	out	0x25, r24	; 37
		TIMSK0 |= 1<<TOIE0;
 49a:	ee e6       	ldi	r30, 0x6E	; 110
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	80 83       	st	Z, r24
 4a4:	1c c0       	rjmp	.+56     	; 0x4de <__vector_3+0x68>

	}//als echo pin uit gaat de timer stoppen en waarden aan countTimer0 meegeven
	else{
		
		TCCR0B &= ~(1<<CS00);
 4a6:	85 b5       	in	r24, 0x25	; 37
 4a8:	8e 7f       	andi	r24, 0xFE	; 254
 4aa:	85 bd       	out	0x25, r24	; 37
		countTimer0 += TCNT0;
 4ac:	26 b5       	in	r18, 0x26	; 38
 4ae:	80 91 00 01 	lds	r24, 0x0100
 4b2:	90 91 01 01 	lds	r25, 0x0101
 4b6:	a0 91 02 01 	lds	r26, 0x0102
 4ba:	b0 91 03 01 	lds	r27, 0x0103
 4be:	82 0f       	add	r24, r18
 4c0:	91 1d       	adc	r25, r1
 4c2:	a1 1d       	adc	r26, r1
 4c4:	b1 1d       	adc	r27, r1
 4c6:	80 93 00 01 	sts	0x0100, r24
 4ca:	90 93 01 01 	sts	0x0101, r25
 4ce:	a0 93 02 01 	sts	0x0102, r26
 4d2:	b0 93 03 01 	sts	0x0103, r27
		TCNT0 = 0;
 4d6:	16 bc       	out	0x26, r1	; 38
		//echoDone flag op 1 zetten zodat ermee kan worden gerekend
		echoDone = 1;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	80 93 04 01 	sts	0x0104, r24

	}
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	bf 91       	pop	r27
 4e4:	af 91       	pop	r26
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	2f 91       	pop	r18
 4ec:	0f 90       	pop	r0
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	0f 90       	pop	r0
 4f2:	1f 90       	pop	r1
 4f4:	18 95       	reti

000004f6 <main>:

int main() {

	//Poort init
	DDRB = 0xfe;
 4f6:	8e ef       	ldi	r24, 0xFE	; 254
 4f8:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xff;
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	8a b9       	out	0x0a, r24	; 10

	//PCINT0 init
	PCICR |= (1 << PCIE0);
 4fe:	e8 e6       	ldi	r30, 0x68	; 104
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	81 60       	ori	r24, 0x01	; 1
 506:	80 83       	st	Z, r24
	PCMSK0 |= (1<< PCINT0);
 508:	eb e6       	ldi	r30, 0x6B	; 107
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	80 83       	st	Z, r24
	
	uart_init();//init serialisering
 512:	0e 94 36 01 	call	0x26c	; 0x26c <uart_init>

	//scheduler
	SCH_Init_T1();
 516:	0e 94 de 00 	call	0x1bc	; 0x1bc <SCH_Init_T1>
	
	SCH_Add_Task(readTemp,100,300);
 51a:	82 ef       	ldi	r24, 0xF2	; 242
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	64 e6       	ldi	r22, 0x64	; 100
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	4c e2       	ldi	r20, 0x2C	; 44
 524:	51 e0       	ldi	r21, 0x01	; 1
 526:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(readLDR,200,300);
 52a:	86 ee       	ldi	r24, 0xE6	; 230
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	68 ec       	ldi	r22, 0xC8	; 200
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	4c e2       	ldi	r20, 0x2C	; 44
 534:	51 e0       	ldi	r21, 0x01	; 1
 536:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(SR04Signal,300,300);
 53a:	8c e4       	ldi	r24, 0x4C	; 76
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	6c e2       	ldi	r22, 0x2C	; 44
 540:	71 e0       	ldi	r23, 0x01	; 1
 542:	4c e2       	ldi	r20, 0x2C	; 44
 544:	51 e0       	ldi	r21, 0x01	; 1
 546:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>

	SCH_Start();
 54a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SCH_Start>

	//run scheduler
	while(1) {
		SCH_Dispatch_Tasks();
 54e:	0e 94 a7 00 	call	0x14e	; 0x14e <SCH_Dispatch_Tasks>
 552:	fd cf       	rjmp	.-6      	; 0x54e <main+0x58>

00000554 <__subsf3>:
 554:	50 58       	subi	r21, 0x80	; 128

00000556 <__addsf3>:
 556:	bb 27       	eor	r27, r27
 558:	aa 27       	eor	r26, r26
 55a:	0e d0       	rcall	.+28     	; 0x578 <__addsf3x>
 55c:	70 c1       	rjmp	.+736    	; 0x83e <__fp_round>
 55e:	61 d1       	rcall	.+706    	; 0x822 <__fp_pscA>
 560:	30 f0       	brcs	.+12     	; 0x56e <__addsf3+0x18>
 562:	66 d1       	rcall	.+716    	; 0x830 <__fp_pscB>
 564:	20 f0       	brcs	.+8      	; 0x56e <__addsf3+0x18>
 566:	31 f4       	brne	.+12     	; 0x574 <__addsf3+0x1e>
 568:	9f 3f       	cpi	r25, 0xFF	; 255
 56a:	11 f4       	brne	.+4      	; 0x570 <__addsf3+0x1a>
 56c:	1e f4       	brtc	.+6      	; 0x574 <__addsf3+0x1e>
 56e:	56 c1       	rjmp	.+684    	; 0x81c <__fp_nan>
 570:	0e f4       	brtc	.+2      	; 0x574 <__addsf3+0x1e>
 572:	e0 95       	com	r30
 574:	e7 fb       	bst	r30, 7
 576:	4c c1       	rjmp	.+664    	; 0x810 <__fp_inf>

00000578 <__addsf3x>:
 578:	e9 2f       	mov	r30, r25
 57a:	72 d1       	rcall	.+740    	; 0x860 <__fp_split3>
 57c:	80 f3       	brcs	.-32     	; 0x55e <__addsf3+0x8>
 57e:	ba 17       	cp	r27, r26
 580:	62 07       	cpc	r22, r18
 582:	73 07       	cpc	r23, r19
 584:	84 07       	cpc	r24, r20
 586:	95 07       	cpc	r25, r21
 588:	18 f0       	brcs	.+6      	; 0x590 <__addsf3x+0x18>
 58a:	71 f4       	brne	.+28     	; 0x5a8 <__addsf3x+0x30>
 58c:	9e f5       	brtc	.+102    	; 0x5f4 <__addsf3x+0x7c>
 58e:	8a c1       	rjmp	.+788    	; 0x8a4 <__fp_zero>
 590:	0e f4       	brtc	.+2      	; 0x594 <__addsf3x+0x1c>
 592:	e0 95       	com	r30
 594:	0b 2e       	mov	r0, r27
 596:	ba 2f       	mov	r27, r26
 598:	a0 2d       	mov	r26, r0
 59a:	0b 01       	movw	r0, r22
 59c:	b9 01       	movw	r22, r18
 59e:	90 01       	movw	r18, r0
 5a0:	0c 01       	movw	r0, r24
 5a2:	ca 01       	movw	r24, r20
 5a4:	a0 01       	movw	r20, r0
 5a6:	11 24       	eor	r1, r1
 5a8:	ff 27       	eor	r31, r31
 5aa:	59 1b       	sub	r21, r25
 5ac:	99 f0       	breq	.+38     	; 0x5d4 <__addsf3x+0x5c>
 5ae:	59 3f       	cpi	r21, 0xF9	; 249
 5b0:	50 f4       	brcc	.+20     	; 0x5c6 <__addsf3x+0x4e>
 5b2:	50 3e       	cpi	r21, 0xE0	; 224
 5b4:	68 f1       	brcs	.+90     	; 0x610 <__addsf3x+0x98>
 5b6:	1a 16       	cp	r1, r26
 5b8:	f0 40       	sbci	r31, 0x00	; 0
 5ba:	a2 2f       	mov	r26, r18
 5bc:	23 2f       	mov	r18, r19
 5be:	34 2f       	mov	r19, r20
 5c0:	44 27       	eor	r20, r20
 5c2:	58 5f       	subi	r21, 0xF8	; 248
 5c4:	f3 cf       	rjmp	.-26     	; 0x5ac <__addsf3x+0x34>
 5c6:	46 95       	lsr	r20
 5c8:	37 95       	ror	r19
 5ca:	27 95       	ror	r18
 5cc:	a7 95       	ror	r26
 5ce:	f0 40       	sbci	r31, 0x00	; 0
 5d0:	53 95       	inc	r21
 5d2:	c9 f7       	brne	.-14     	; 0x5c6 <__addsf3x+0x4e>
 5d4:	7e f4       	brtc	.+30     	; 0x5f4 <__addsf3x+0x7c>
 5d6:	1f 16       	cp	r1, r31
 5d8:	ba 0b       	sbc	r27, r26
 5da:	62 0b       	sbc	r22, r18
 5dc:	73 0b       	sbc	r23, r19
 5de:	84 0b       	sbc	r24, r20
 5e0:	ba f0       	brmi	.+46     	; 0x610 <__addsf3x+0x98>
 5e2:	91 50       	subi	r25, 0x01	; 1
 5e4:	a1 f0       	breq	.+40     	; 0x60e <__addsf3x+0x96>
 5e6:	ff 0f       	add	r31, r31
 5e8:	bb 1f       	adc	r27, r27
 5ea:	66 1f       	adc	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	c2 f7       	brpl	.-16     	; 0x5e2 <__addsf3x+0x6a>
 5f2:	0e c0       	rjmp	.+28     	; 0x610 <__addsf3x+0x98>
 5f4:	ba 0f       	add	r27, r26
 5f6:	62 1f       	adc	r22, r18
 5f8:	73 1f       	adc	r23, r19
 5fa:	84 1f       	adc	r24, r20
 5fc:	48 f4       	brcc	.+18     	; 0x610 <__addsf3x+0x98>
 5fe:	87 95       	ror	r24
 600:	77 95       	ror	r23
 602:	67 95       	ror	r22
 604:	b7 95       	ror	r27
 606:	f7 95       	ror	r31
 608:	9e 3f       	cpi	r25, 0xFE	; 254
 60a:	08 f0       	brcs	.+2      	; 0x60e <__addsf3x+0x96>
 60c:	b3 cf       	rjmp	.-154    	; 0x574 <__addsf3+0x1e>
 60e:	93 95       	inc	r25
 610:	88 0f       	add	r24, r24
 612:	08 f0       	brcs	.+2      	; 0x616 <__addsf3x+0x9e>
 614:	99 27       	eor	r25, r25
 616:	ee 0f       	add	r30, r30
 618:	97 95       	ror	r25
 61a:	87 95       	ror	r24
 61c:	08 95       	ret

0000061e <__cmpsf2>:
 61e:	d4 d0       	rcall	.+424    	; 0x7c8 <__fp_cmp>
 620:	08 f4       	brcc	.+2      	; 0x624 <__cmpsf2+0x6>
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	08 95       	ret

00000626 <__divsf3>:
 626:	0c d0       	rcall	.+24     	; 0x640 <__divsf3x>
 628:	0a c1       	rjmp	.+532    	; 0x83e <__fp_round>
 62a:	02 d1       	rcall	.+516    	; 0x830 <__fp_pscB>
 62c:	40 f0       	brcs	.+16     	; 0x63e <__divsf3+0x18>
 62e:	f9 d0       	rcall	.+498    	; 0x822 <__fp_pscA>
 630:	30 f0       	brcs	.+12     	; 0x63e <__divsf3+0x18>
 632:	21 f4       	brne	.+8      	; 0x63c <__divsf3+0x16>
 634:	5f 3f       	cpi	r21, 0xFF	; 255
 636:	19 f0       	breq	.+6      	; 0x63e <__divsf3+0x18>
 638:	eb c0       	rjmp	.+470    	; 0x810 <__fp_inf>
 63a:	51 11       	cpse	r21, r1
 63c:	34 c1       	rjmp	.+616    	; 0x8a6 <__fp_szero>
 63e:	ee c0       	rjmp	.+476    	; 0x81c <__fp_nan>

00000640 <__divsf3x>:
 640:	0f d1       	rcall	.+542    	; 0x860 <__fp_split3>
 642:	98 f3       	brcs	.-26     	; 0x62a <__divsf3+0x4>

00000644 <__divsf3_pse>:
 644:	99 23       	and	r25, r25
 646:	c9 f3       	breq	.-14     	; 0x63a <__divsf3+0x14>
 648:	55 23       	and	r21, r21
 64a:	b1 f3       	breq	.-20     	; 0x638 <__divsf3+0x12>
 64c:	95 1b       	sub	r25, r21
 64e:	55 0b       	sbc	r21, r21
 650:	bb 27       	eor	r27, r27
 652:	aa 27       	eor	r26, r26
 654:	62 17       	cp	r22, r18
 656:	73 07       	cpc	r23, r19
 658:	84 07       	cpc	r24, r20
 65a:	38 f0       	brcs	.+14     	; 0x66a <__divsf3_pse+0x26>
 65c:	9f 5f       	subi	r25, 0xFF	; 255
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	22 0f       	add	r18, r18
 662:	33 1f       	adc	r19, r19
 664:	44 1f       	adc	r20, r20
 666:	aa 1f       	adc	r26, r26
 668:	a9 f3       	breq	.-22     	; 0x654 <__divsf3_pse+0x10>
 66a:	33 d0       	rcall	.+102    	; 0x6d2 <__divsf3_pse+0x8e>
 66c:	0e 2e       	mov	r0, r30
 66e:	3a f0       	brmi	.+14     	; 0x67e <__divsf3_pse+0x3a>
 670:	e0 e8       	ldi	r30, 0x80	; 128
 672:	30 d0       	rcall	.+96     	; 0x6d4 <__divsf3_pse+0x90>
 674:	91 50       	subi	r25, 0x01	; 1
 676:	50 40       	sbci	r21, 0x00	; 0
 678:	e6 95       	lsr	r30
 67a:	00 1c       	adc	r0, r0
 67c:	ca f7       	brpl	.-14     	; 0x670 <__divsf3_pse+0x2c>
 67e:	29 d0       	rcall	.+82     	; 0x6d2 <__divsf3_pse+0x8e>
 680:	fe 2f       	mov	r31, r30
 682:	27 d0       	rcall	.+78     	; 0x6d2 <__divsf3_pse+0x8e>
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	bb 1f       	adc	r27, r27
 68c:	26 17       	cp	r18, r22
 68e:	37 07       	cpc	r19, r23
 690:	48 07       	cpc	r20, r24
 692:	ab 07       	cpc	r26, r27
 694:	b0 e8       	ldi	r27, 0x80	; 128
 696:	09 f0       	breq	.+2      	; 0x69a <__divsf3_pse+0x56>
 698:	bb 0b       	sbc	r27, r27
 69a:	80 2d       	mov	r24, r0
 69c:	bf 01       	movw	r22, r30
 69e:	ff 27       	eor	r31, r31
 6a0:	93 58       	subi	r25, 0x83	; 131
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255
 6a4:	2a f0       	brmi	.+10     	; 0x6b0 <__divsf3_pse+0x6c>
 6a6:	9e 3f       	cpi	r25, 0xFE	; 254
 6a8:	51 05       	cpc	r21, r1
 6aa:	68 f0       	brcs	.+26     	; 0x6c6 <__divsf3_pse+0x82>
 6ac:	b1 c0       	rjmp	.+354    	; 0x810 <__fp_inf>
 6ae:	fb c0       	rjmp	.+502    	; 0x8a6 <__fp_szero>
 6b0:	5f 3f       	cpi	r21, 0xFF	; 255
 6b2:	ec f3       	brlt	.-6      	; 0x6ae <__divsf3_pse+0x6a>
 6b4:	98 3e       	cpi	r25, 0xE8	; 232
 6b6:	dc f3       	brlt	.-10     	; 0x6ae <__divsf3_pse+0x6a>
 6b8:	86 95       	lsr	r24
 6ba:	77 95       	ror	r23
 6bc:	67 95       	ror	r22
 6be:	b7 95       	ror	r27
 6c0:	f7 95       	ror	r31
 6c2:	9f 5f       	subi	r25, 0xFF	; 255
 6c4:	c9 f7       	brne	.-14     	; 0x6b8 <__divsf3_pse+0x74>
 6c6:	88 0f       	add	r24, r24
 6c8:	91 1d       	adc	r25, r1
 6ca:	96 95       	lsr	r25
 6cc:	87 95       	ror	r24
 6ce:	97 f9       	bld	r25, 7
 6d0:	08 95       	ret
 6d2:	e1 e0       	ldi	r30, 0x01	; 1
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	bb 1f       	adc	r27, r27
 6dc:	62 17       	cp	r22, r18
 6de:	73 07       	cpc	r23, r19
 6e0:	84 07       	cpc	r24, r20
 6e2:	ba 07       	cpc	r27, r26
 6e4:	20 f0       	brcs	.+8      	; 0x6ee <__divsf3_pse+0xaa>
 6e6:	62 1b       	sub	r22, r18
 6e8:	73 0b       	sbc	r23, r19
 6ea:	84 0b       	sbc	r24, r20
 6ec:	ba 0b       	sbc	r27, r26
 6ee:	ee 1f       	adc	r30, r30
 6f0:	88 f7       	brcc	.-30     	; 0x6d4 <__divsf3_pse+0x90>
 6f2:	e0 95       	com	r30
 6f4:	08 95       	ret

000006f6 <__fixunssfsi>:
 6f6:	bc d0       	rcall	.+376    	; 0x870 <__fp_splitA>
 6f8:	88 f0       	brcs	.+34     	; 0x71c <__fixunssfsi+0x26>
 6fa:	9f 57       	subi	r25, 0x7F	; 127
 6fc:	90 f0       	brcs	.+36     	; 0x722 <__fixunssfsi+0x2c>
 6fe:	b9 2f       	mov	r27, r25
 700:	99 27       	eor	r25, r25
 702:	b7 51       	subi	r27, 0x17	; 23
 704:	a0 f0       	brcs	.+40     	; 0x72e <__fixunssfsi+0x38>
 706:	d1 f0       	breq	.+52     	; 0x73c <__fixunssfsi+0x46>
 708:	66 0f       	add	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	1a f0       	brmi	.+6      	; 0x718 <__fixunssfsi+0x22>
 712:	ba 95       	dec	r27
 714:	c9 f7       	brne	.-14     	; 0x708 <__fixunssfsi+0x12>
 716:	12 c0       	rjmp	.+36     	; 0x73c <__fixunssfsi+0x46>
 718:	b1 30       	cpi	r27, 0x01	; 1
 71a:	81 f0       	breq	.+32     	; 0x73c <__fixunssfsi+0x46>
 71c:	c3 d0       	rcall	.+390    	; 0x8a4 <__fp_zero>
 71e:	b1 e0       	ldi	r27, 0x01	; 1
 720:	08 95       	ret
 722:	c0 c0       	rjmp	.+384    	; 0x8a4 <__fp_zero>
 724:	67 2f       	mov	r22, r23
 726:	78 2f       	mov	r23, r24
 728:	88 27       	eor	r24, r24
 72a:	b8 5f       	subi	r27, 0xF8	; 248
 72c:	39 f0       	breq	.+14     	; 0x73c <__fixunssfsi+0x46>
 72e:	b9 3f       	cpi	r27, 0xF9	; 249
 730:	cc f3       	brlt	.-14     	; 0x724 <__fixunssfsi+0x2e>
 732:	86 95       	lsr	r24
 734:	77 95       	ror	r23
 736:	67 95       	ror	r22
 738:	b3 95       	inc	r27
 73a:	d9 f7       	brne	.-10     	; 0x732 <__fixunssfsi+0x3c>
 73c:	3e f4       	brtc	.+14     	; 0x74c <__fixunssfsi+0x56>
 73e:	90 95       	com	r25
 740:	80 95       	com	r24
 742:	70 95       	com	r23
 744:	61 95       	neg	r22
 746:	7f 4f       	sbci	r23, 0xFF	; 255
 748:	8f 4f       	sbci	r24, 0xFF	; 255
 74a:	9f 4f       	sbci	r25, 0xFF	; 255
 74c:	08 95       	ret

0000074e <__floatunsisf>:
 74e:	e8 94       	clt
 750:	09 c0       	rjmp	.+18     	; 0x764 <__floatsisf+0x12>

00000752 <__floatsisf>:
 752:	97 fb       	bst	r25, 7
 754:	3e f4       	brtc	.+14     	; 0x764 <__floatsisf+0x12>
 756:	90 95       	com	r25
 758:	80 95       	com	r24
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	99 23       	and	r25, r25
 766:	a9 f0       	breq	.+42     	; 0x792 <__floatsisf+0x40>
 768:	f9 2f       	mov	r31, r25
 76a:	96 e9       	ldi	r25, 0x96	; 150
 76c:	bb 27       	eor	r27, r27
 76e:	93 95       	inc	r25
 770:	f6 95       	lsr	r31
 772:	87 95       	ror	r24
 774:	77 95       	ror	r23
 776:	67 95       	ror	r22
 778:	b7 95       	ror	r27
 77a:	f1 11       	cpse	r31, r1
 77c:	f8 cf       	rjmp	.-16     	; 0x76e <__floatsisf+0x1c>
 77e:	fa f4       	brpl	.+62     	; 0x7be <__floatsisf+0x6c>
 780:	bb 0f       	add	r27, r27
 782:	11 f4       	brne	.+4      	; 0x788 <__floatsisf+0x36>
 784:	60 ff       	sbrs	r22, 0
 786:	1b c0       	rjmp	.+54     	; 0x7be <__floatsisf+0x6c>
 788:	6f 5f       	subi	r22, 0xFF	; 255
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	8f 4f       	sbci	r24, 0xFF	; 255
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	16 c0       	rjmp	.+44     	; 0x7be <__floatsisf+0x6c>
 792:	88 23       	and	r24, r24
 794:	11 f0       	breq	.+4      	; 0x79a <__floatsisf+0x48>
 796:	96 e9       	ldi	r25, 0x96	; 150
 798:	11 c0       	rjmp	.+34     	; 0x7bc <__floatsisf+0x6a>
 79a:	77 23       	and	r23, r23
 79c:	21 f0       	breq	.+8      	; 0x7a6 <__floatsisf+0x54>
 79e:	9e e8       	ldi	r25, 0x8E	; 142
 7a0:	87 2f       	mov	r24, r23
 7a2:	76 2f       	mov	r23, r22
 7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <__floatsisf+0x5e>
 7a6:	66 23       	and	r22, r22
 7a8:	71 f0       	breq	.+28     	; 0x7c6 <__floatsisf+0x74>
 7aa:	96 e8       	ldi	r25, 0x86	; 134
 7ac:	86 2f       	mov	r24, r22
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	2a f0       	brmi	.+10     	; 0x7be <__floatsisf+0x6c>
 7b4:	9a 95       	dec	r25
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	da f7       	brpl	.-10     	; 0x7b4 <__floatsisf+0x62>
 7be:	88 0f       	add	r24, r24
 7c0:	96 95       	lsr	r25
 7c2:	87 95       	ror	r24
 7c4:	97 f9       	bld	r25, 7
 7c6:	08 95       	ret

000007c8 <__fp_cmp>:
 7c8:	99 0f       	add	r25, r25
 7ca:	00 08       	sbc	r0, r0
 7cc:	55 0f       	add	r21, r21
 7ce:	aa 0b       	sbc	r26, r26
 7d0:	e0 e8       	ldi	r30, 0x80	; 128
 7d2:	fe ef       	ldi	r31, 0xFE	; 254
 7d4:	16 16       	cp	r1, r22
 7d6:	17 06       	cpc	r1, r23
 7d8:	e8 07       	cpc	r30, r24
 7da:	f9 07       	cpc	r31, r25
 7dc:	c0 f0       	brcs	.+48     	; 0x80e <__fp_cmp+0x46>
 7de:	12 16       	cp	r1, r18
 7e0:	13 06       	cpc	r1, r19
 7e2:	e4 07       	cpc	r30, r20
 7e4:	f5 07       	cpc	r31, r21
 7e6:	98 f0       	brcs	.+38     	; 0x80e <__fp_cmp+0x46>
 7e8:	62 1b       	sub	r22, r18
 7ea:	73 0b       	sbc	r23, r19
 7ec:	84 0b       	sbc	r24, r20
 7ee:	95 0b       	sbc	r25, r21
 7f0:	39 f4       	brne	.+14     	; 0x800 <__fp_cmp+0x38>
 7f2:	0a 26       	eor	r0, r26
 7f4:	61 f0       	breq	.+24     	; 0x80e <__fp_cmp+0x46>
 7f6:	23 2b       	or	r18, r19
 7f8:	24 2b       	or	r18, r20
 7fa:	25 2b       	or	r18, r21
 7fc:	21 f4       	brne	.+8      	; 0x806 <__fp_cmp+0x3e>
 7fe:	08 95       	ret
 800:	0a 26       	eor	r0, r26
 802:	09 f4       	brne	.+2      	; 0x806 <__fp_cmp+0x3e>
 804:	a1 40       	sbci	r26, 0x01	; 1
 806:	a6 95       	lsr	r26
 808:	8f ef       	ldi	r24, 0xFF	; 255
 80a:	81 1d       	adc	r24, r1
 80c:	81 1d       	adc	r24, r1
 80e:	08 95       	ret

00000810 <__fp_inf>:
 810:	97 f9       	bld	r25, 7
 812:	9f 67       	ori	r25, 0x7F	; 127
 814:	80 e8       	ldi	r24, 0x80	; 128
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	08 95       	ret

0000081c <__fp_nan>:
 81c:	9f ef       	ldi	r25, 0xFF	; 255
 81e:	80 ec       	ldi	r24, 0xC0	; 192
 820:	08 95       	ret

00000822 <__fp_pscA>:
 822:	00 24       	eor	r0, r0
 824:	0a 94       	dec	r0
 826:	16 16       	cp	r1, r22
 828:	17 06       	cpc	r1, r23
 82a:	18 06       	cpc	r1, r24
 82c:	09 06       	cpc	r0, r25
 82e:	08 95       	ret

00000830 <__fp_pscB>:
 830:	00 24       	eor	r0, r0
 832:	0a 94       	dec	r0
 834:	12 16       	cp	r1, r18
 836:	13 06       	cpc	r1, r19
 838:	14 06       	cpc	r1, r20
 83a:	05 06       	cpc	r0, r21
 83c:	08 95       	ret

0000083e <__fp_round>:
 83e:	09 2e       	mov	r0, r25
 840:	03 94       	inc	r0
 842:	00 0c       	add	r0, r0
 844:	11 f4       	brne	.+4      	; 0x84a <__fp_round+0xc>
 846:	88 23       	and	r24, r24
 848:	52 f0       	brmi	.+20     	; 0x85e <__fp_round+0x20>
 84a:	bb 0f       	add	r27, r27
 84c:	40 f4       	brcc	.+16     	; 0x85e <__fp_round+0x20>
 84e:	bf 2b       	or	r27, r31
 850:	11 f4       	brne	.+4      	; 0x856 <__fp_round+0x18>
 852:	60 ff       	sbrs	r22, 0
 854:	04 c0       	rjmp	.+8      	; 0x85e <__fp_round+0x20>
 856:	6f 5f       	subi	r22, 0xFF	; 255
 858:	7f 4f       	sbci	r23, 0xFF	; 255
 85a:	8f 4f       	sbci	r24, 0xFF	; 255
 85c:	9f 4f       	sbci	r25, 0xFF	; 255
 85e:	08 95       	ret

00000860 <__fp_split3>:
 860:	57 fd       	sbrc	r21, 7
 862:	90 58       	subi	r25, 0x80	; 128
 864:	44 0f       	add	r20, r20
 866:	55 1f       	adc	r21, r21
 868:	59 f0       	breq	.+22     	; 0x880 <__fp_splitA+0x10>
 86a:	5f 3f       	cpi	r21, 0xFF	; 255
 86c:	71 f0       	breq	.+28     	; 0x88a <__fp_splitA+0x1a>
 86e:	47 95       	ror	r20

00000870 <__fp_splitA>:
 870:	88 0f       	add	r24, r24
 872:	97 fb       	bst	r25, 7
 874:	99 1f       	adc	r25, r25
 876:	61 f0       	breq	.+24     	; 0x890 <__fp_splitA+0x20>
 878:	9f 3f       	cpi	r25, 0xFF	; 255
 87a:	79 f0       	breq	.+30     	; 0x89a <__fp_splitA+0x2a>
 87c:	87 95       	ror	r24
 87e:	08 95       	ret
 880:	12 16       	cp	r1, r18
 882:	13 06       	cpc	r1, r19
 884:	14 06       	cpc	r1, r20
 886:	55 1f       	adc	r21, r21
 888:	f2 cf       	rjmp	.-28     	; 0x86e <__fp_split3+0xe>
 88a:	46 95       	lsr	r20
 88c:	f1 df       	rcall	.-30     	; 0x870 <__fp_splitA>
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <__fp_splitA+0x30>
 890:	16 16       	cp	r1, r22
 892:	17 06       	cpc	r1, r23
 894:	18 06       	cpc	r1, r24
 896:	99 1f       	adc	r25, r25
 898:	f1 cf       	rjmp	.-30     	; 0x87c <__fp_splitA+0xc>
 89a:	86 95       	lsr	r24
 89c:	71 05       	cpc	r23, r1
 89e:	61 05       	cpc	r22, r1
 8a0:	08 94       	sec
 8a2:	08 95       	ret

000008a4 <__fp_zero>:
 8a4:	e8 94       	clt

000008a6 <__fp_szero>:
 8a6:	bb 27       	eor	r27, r27
 8a8:	66 27       	eor	r22, r22
 8aa:	77 27       	eor	r23, r23
 8ac:	cb 01       	movw	r24, r22
 8ae:	97 f9       	bld	r25, 7
 8b0:	08 95       	ret

000008b2 <__gesf2>:
 8b2:	8a df       	rcall	.-236    	; 0x7c8 <__fp_cmp>
 8b4:	08 f4       	brcc	.+2      	; 0x8b8 <__gesf2+0x6>
 8b6:	8f ef       	ldi	r24, 0xFF	; 255
 8b8:	08 95       	ret

000008ba <__mulsf3>:
 8ba:	0b d0       	rcall	.+22     	; 0x8d2 <__mulsf3x>
 8bc:	c0 cf       	rjmp	.-128    	; 0x83e <__fp_round>
 8be:	b1 df       	rcall	.-158    	; 0x822 <__fp_pscA>
 8c0:	28 f0       	brcs	.+10     	; 0x8cc <__mulsf3+0x12>
 8c2:	b6 df       	rcall	.-148    	; 0x830 <__fp_pscB>
 8c4:	18 f0       	brcs	.+6      	; 0x8cc <__mulsf3+0x12>
 8c6:	95 23       	and	r25, r21
 8c8:	09 f0       	breq	.+2      	; 0x8cc <__mulsf3+0x12>
 8ca:	a2 cf       	rjmp	.-188    	; 0x810 <__fp_inf>
 8cc:	a7 cf       	rjmp	.-178    	; 0x81c <__fp_nan>
 8ce:	11 24       	eor	r1, r1
 8d0:	ea cf       	rjmp	.-44     	; 0x8a6 <__fp_szero>

000008d2 <__mulsf3x>:
 8d2:	c6 df       	rcall	.-116    	; 0x860 <__fp_split3>
 8d4:	a0 f3       	brcs	.-24     	; 0x8be <__mulsf3+0x4>

000008d6 <__mulsf3_pse>:
 8d6:	95 9f       	mul	r25, r21
 8d8:	d1 f3       	breq	.-12     	; 0x8ce <__mulsf3+0x14>
 8da:	95 0f       	add	r25, r21
 8dc:	50 e0       	ldi	r21, 0x00	; 0
 8de:	55 1f       	adc	r21, r21
 8e0:	62 9f       	mul	r22, r18
 8e2:	f0 01       	movw	r30, r0
 8e4:	72 9f       	mul	r23, r18
 8e6:	bb 27       	eor	r27, r27
 8e8:	f0 0d       	add	r31, r0
 8ea:	b1 1d       	adc	r27, r1
 8ec:	63 9f       	mul	r22, r19
 8ee:	aa 27       	eor	r26, r26
 8f0:	f0 0d       	add	r31, r0
 8f2:	b1 1d       	adc	r27, r1
 8f4:	aa 1f       	adc	r26, r26
 8f6:	64 9f       	mul	r22, r20
 8f8:	66 27       	eor	r22, r22
 8fa:	b0 0d       	add	r27, r0
 8fc:	a1 1d       	adc	r26, r1
 8fe:	66 1f       	adc	r22, r22
 900:	82 9f       	mul	r24, r18
 902:	22 27       	eor	r18, r18
 904:	b0 0d       	add	r27, r0
 906:	a1 1d       	adc	r26, r1
 908:	62 1f       	adc	r22, r18
 90a:	73 9f       	mul	r23, r19
 90c:	b0 0d       	add	r27, r0
 90e:	a1 1d       	adc	r26, r1
 910:	62 1f       	adc	r22, r18
 912:	83 9f       	mul	r24, r19
 914:	a0 0d       	add	r26, r0
 916:	61 1d       	adc	r22, r1
 918:	22 1f       	adc	r18, r18
 91a:	74 9f       	mul	r23, r20
 91c:	33 27       	eor	r19, r19
 91e:	a0 0d       	add	r26, r0
 920:	61 1d       	adc	r22, r1
 922:	23 1f       	adc	r18, r19
 924:	84 9f       	mul	r24, r20
 926:	60 0d       	add	r22, r0
 928:	21 1d       	adc	r18, r1
 92a:	82 2f       	mov	r24, r18
 92c:	76 2f       	mov	r23, r22
 92e:	6a 2f       	mov	r22, r26
 930:	11 24       	eor	r1, r1
 932:	9f 57       	subi	r25, 0x7F	; 127
 934:	50 40       	sbci	r21, 0x00	; 0
 936:	8a f0       	brmi	.+34     	; 0x95a <__stack+0x5b>
 938:	e1 f0       	breq	.+56     	; 0x972 <__stack+0x73>
 93a:	88 23       	and	r24, r24
 93c:	4a f0       	brmi	.+18     	; 0x950 <__stack+0x51>
 93e:	ee 0f       	add	r30, r30
 940:	ff 1f       	adc	r31, r31
 942:	bb 1f       	adc	r27, r27
 944:	66 1f       	adc	r22, r22
 946:	77 1f       	adc	r23, r23
 948:	88 1f       	adc	r24, r24
 94a:	91 50       	subi	r25, 0x01	; 1
 94c:	50 40       	sbci	r21, 0x00	; 0
 94e:	a9 f7       	brne	.-22     	; 0x93a <__stack+0x3b>
 950:	9e 3f       	cpi	r25, 0xFE	; 254
 952:	51 05       	cpc	r21, r1
 954:	70 f0       	brcs	.+28     	; 0x972 <__stack+0x73>
 956:	5c cf       	rjmp	.-328    	; 0x810 <__fp_inf>
 958:	a6 cf       	rjmp	.-180    	; 0x8a6 <__fp_szero>
 95a:	5f 3f       	cpi	r21, 0xFF	; 255
 95c:	ec f3       	brlt	.-6      	; 0x958 <__stack+0x59>
 95e:	98 3e       	cpi	r25, 0xE8	; 232
 960:	dc f3       	brlt	.-10     	; 0x958 <__stack+0x59>
 962:	86 95       	lsr	r24
 964:	77 95       	ror	r23
 966:	67 95       	ror	r22
 968:	b7 95       	ror	r27
 96a:	f7 95       	ror	r31
 96c:	e7 95       	ror	r30
 96e:	9f 5f       	subi	r25, 0xFF	; 255
 970:	c1 f7       	brne	.-16     	; 0x962 <__stack+0x63>
 972:	fe 2b       	or	r31, r30
 974:	88 0f       	add	r24, r24
 976:	91 1d       	adc	r25, r1
 978:	96 95       	lsr	r25
 97a:	87 95       	ror	r24
 97c:	97 f9       	bld	r25, 7
 97e:	08 95       	ret

00000980 <_exit>:
 980:	f8 94       	cli

00000982 <__stop_program>:
 982:	ff cf       	rjmp	.-2      	; 0x982 <__stop_program>
